<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>安迪陈技术日志，架构、感悟、系统分析、团队管理</title>
  <icon>https://www.gravatar.com/avatar/14b855db257b722c0b32293669bbc4ac</icon>
  <subtitle>自强不息，厚德载物</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.lovesofttech.com/"/>
  <updated>2019-09-16T13:56:06.229Z</updated>
  <id>https://www.lovesofttech.com/</id>
  
  <author>
    <name>安迪陈</name>
    <email>andy@lovesofttech.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于本博客</title>
    <link href="https://www.lovesofttech.com/about/"/>
    <id>https://www.lovesofttech.com/about/</id>
    <published>2019-09-12T16:00:00.000Z</published>
    <updated>2019-09-16T13:56:06.229Z</updated>
    
    <content type="html"><![CDATA[<ul><li>主要记录与技术有关的经验心得，绝大多数来源于实践，具备高度可还原性。</li><li>偶尔也会记录一下技术人生的一点感想以及团队管理的一些心得。</li></ul><a id="more"></a><h1 id="文章风格"><a href="#文章风格" class="headerlink" title="文章风格"></a>文章风格</h1><p>本博客的原创文章绝大多数来源于工作中的总结和记录，所以会有以下这些特点：</p><ul><li>我会记录遇到的某个技术点的一系列问题，并把出错信息完整的列出来，把一步一步解决问题的过程写出来，这样：<ul><li>大家在遇到同样（类似）问题时可以用问题关键字在 google、百度搜索到我的文章。</li><li>进入我的博客后，利用右上角的搜索功能，利用技术关键词可以快速搜索到相关文章。</li></ul></li><li>但是，这样一来，在查看文章寻求问题解决方案时，可能不能立即看到最想要看的内容，也许还会觉得文章啰嗦，所以，我一般会把问题和解决方案分开写，通过文章目录（左侧）可以方便的进行定位。</li><li>现在新写的文章，我会尽量把预期读者最关心的内容写在最前面，然后才开始记录具体的问题以及解决过程。</li><li>另外，随着文章数量的增加，随着我对技术理解的提升，我对文章的内容、文章的组织结构也都会不断改进。</li><li>我时常会发现以前的文章组织得并不好，写得也并不怎么样，如果正好我需要查阅，我会尽量对原文按现在的理解重新组织和完善。</li></ul><h1 id="原创与转载"><a href="#原创与转载" class="headerlink" title="原创与转载"></a>原创与转载</h1><p>本博客以原创为主，有极少量转载，转载文章会在文章最前面给出原文链接，如果有参考，也会把参考过的文章专门列出。</p><h1 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h1><p>对于技术博客，不能写评论，始终觉得不完整。</p><ul><li>最开始用的友言，没用多久就被告之要关闭。</li><li>然后转而用畅言，最开始体验还不错，没广告，但也没过多久，不但有了广告，而且还挺多的，于是乎我就关闭了评论。<blockquote><p>关于畅言评论的广告，也是可以理解的，毕竟需要发展就需要有创收，不过，对于我的博客而言，畅言的广告有点喧宾夺主了。</p></blockquote></li><li>由于时间关系，直到 2019 年的中秋假期，才又开始关注并着手配置评论插件。</li><li>我想要的评论功能，首要原则就是没有广告，其次是要支持中文，最后，认证授权方是技术人员大多数人都会有账号的第三方，这几点， <a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">gitalk</a> 都可以满足，挺不错的，感谢作者。</li></ul><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><p><a href="/aboutMe">请点击移步</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;主要记录与技术有关的经验心得，绝大多数来源于实践，具备高度可还原性。&lt;/li&gt;
&lt;li&gt;偶尔也会记录一下技术人生的一点感想以及团队管理的一些心得。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="about" scheme="https://www.lovesofttech.com/categories/about/"/>
    
    
      <category term="about" scheme="https://www.lovesofttech.com/tags/about/"/>
    
  </entry>
  
  <entry>
    <title>在两个 git server 之间同步项目的代码</title>
    <link href="https://www.lovesofttech.com/git/syncBetweenTwoGitServer/"/>
    <id>https://www.lovesofttech.com/git/syncBetweenTwoGitServer/</id>
    <published>2019-09-05T16:00:00.000Z</published>
    <updated>2019-09-13T02:08:35.424Z</updated>
    
    <content type="html"><![CDATA[<ul><li>如果是在 gitee.com 和 github.com 上同步代码，假设默认仓库放到 github.com，只需要 <code>git remote add 仓库别名 gitee.com上的仓库地址</code>，然后在代码有提交时，执行 <code>git push 仓库别名</code> 即可达到目的，<code>仓库别名</code> 自己起一个好记的就行，比如 <code>gitee</code>。</li><li>现在假设在办公室只能用局域网的 git server，到了周末，放不下工作，想在家继续 coding，那么到了下周一，如何将代码同步到办公室的 git server 呢？</li></ul><a id="more"></a><h1 id="模拟这个场景"><a href="#模拟这个场景" class="headerlink" title="模拟这个场景"></a>模拟这个场景</h1><ul><li>假设在家里能访问 coding.net，但不能访问 gitee.com（模拟办公室的局域网环境）。</li><li>而在办公室，即可访问 coding.net 也可访问 gitee.com。</li><li>正在进行的项目为：remoteT</li></ul><h2 id="在办公室-周五下班前"><a href="#在办公室-周五下班前" class="headerlink" title="在办公室, 周五下班前"></a>在办公室, 周五下班前</h2><ol><li><p>同时在 gitee.com 和 coding.net 上创建同名仓库（项目）：remoteT，然后将 gitee.com 上的仓库 remoteT clone 到本地。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/uncleAndyChen/remoteT.git</span><br></pre></td></tr></table></figure></li><li><p>添加文件 readme.md，写一行文本：<code>1. from gitee</code>。</p></li><li><p>推送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m&apos;from gitee&apos;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li><li><p>添加 coding.net 上的仓库 remoteT ，作为远程仓库来管理，添加后将本地代码推送，使用 Git Bash 或者 cmd，在项目根目录下执行如下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add coding https://e.coding.net/andychen/remoteT.git</span><br><span class="line">git push coding</span><br></pre></td></tr></table></figure></li></ol><p>至此，两个 git server 上的仓库 remoteT 的代码就完全一样了。</p><p>远程仓库的配置信息保存到 .git 目录下的 config 文件中了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://gitee.com/uncleAndyChen/remoteT.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[remote &quot;coding&quot;]</span><br><span class="line">url = https://e.coding.net/andychen/remoteT.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/coding/*</span><br></pre></td></tr></table></figure></p><p>如果要修改远程仓库的别名，把 <code>[remote &quot;coding&quot;]</code> 和 <code>fetch = +refs/heads/*:refs/remotes/coding/*</code> 中的 coding 改为想的名字即可。</p><h2 id="周末，在家里"><a href="#周末，在家里" class="headerlink" title="周末，在家里"></a>周末，在家里</h2><ol><li><p>获取 coding.net 上的仓库 remoteT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://e.coding.net/andychen/remoteT.git</span><br></pre></td></tr></table></figure></li><li><p>修改 readme.md 文件，追加一行文本 <code>2. from coding.net</code>，修改好之后推送。</p></li></ol><h2 id="到了下周一，回到办公室"><a href="#到了下周一，回到办公室" class="headerlink" title="到了下周一，回到办公室"></a>到了下周一，回到办公室</h2><ol><li><p>获取在 coding.net 上的仓库 remoteT 的修改，获取时需要指定分支：<code>git pull coding master</code>，这里的 coding 只是远程仓库的别名，创建的时候起的名字（通过命令 <code>git remote add coding https://e.coding.net/andychen/remoteT.git</code> 创建）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git pull coding master</span><br><span class="line">From https://e.coding.net/andychen/remoteT</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Updating 8c02788..ab9d5a4</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.md | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></li><li><p>把在 coding.net 上的仓库 remoteT 的修改再 push 到 gitee.com 上的仓库 remoteT，执行 <code>git push</code> 就行，因为 gitee.com 上的仓库 remoteT 是默认仓库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 5, done.</span><br><span class="line">Counting objects: 100% (5/5), done.</span><br><span class="line">Writing objects: 100% (3/3), 285 bytes | 95.00 KiB/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: Powered By Gitee.com</span><br><span class="line">To https://gitee.com/uncleAndyChen/remoteT.git</span><br><span class="line">   8c02788..ab9d5a4  master -&gt; master</span><br></pre></td></tr></table></figure></li></ol><p>至此，周末在家里通过 coding.net 上的仓库 remoteT 写的代码就完全同步到 gitee.com 上的仓库 remoteT 了。文件 readme.md 的内容变成了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. from gitee</span><br><span class="line">2. from coding.net</span><br></pre></td></tr></table></figure></p><p>获取远程仓库 coding（通过命令 <code>git remote add coding https://e.coding.net/andychen/remoteT.git</code> 创建）的代码时，需要指定分支，否则：You asked to pull from the remote ‘coding’, but did not specify a branch. Because this is not the default configured remote for your current branch, you must specify a branch on the command line.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git pull coding</span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5/5), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From https://e.coding.net/andychen/remoteT</span><br><span class="line">   8c02788..ab9d5a4  master     -&gt; coding/master</span><br><span class="line">You asked to pull from the remote &apos;coding&apos;, but did not specify</span><br><span class="line">a branch. Because this is not the default configured remote</span><br><span class="line">for your current branch, you must specify a branch on the command line.</span><br></pre></td></tr></table></figure></p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>在实际推送的时候，如果提示：Updates were rejected because the remote contains work that you do … This is usually caused by another repository pushing</p><p>通常意味着离上次 <code>git pull</code> 之后，已经有了新的 push，要先 <code>git pull</code>，再 <code>git push</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[utomcat@localhost mis-api]$ git push gitee</span><br><span class="line">To gitee.com:uncleAndyChen/mis-api.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &apos;git@gitee.com:uncleAndyChen/mis-api.git&apos;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &apos;git pull ...&apos;) before pushing again.</span><br><span class="line">hint: See the &apos;Note about fast-forwards&apos; in &apos;git push --help&apos; for details.</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;如果是在 gitee.com 和 github.com 上同步代码，假设默认仓库放到 github.com，只需要 &lt;code&gt;git remote add 仓库别名 gitee.com上的仓库地址&lt;/code&gt;，然后在代码有提交时，执行 &lt;code&gt;git push 仓库别名&lt;/code&gt; 即可达到目的，&lt;code&gt;仓库别名&lt;/code&gt; 自己起一个好记的就行，比如 &lt;code&gt;gitee&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;现在假设在办公室只能用局域网的 git server，到了周末，放不下工作，想在家继续 coding，那么到了下周一，如何将代码同步到办公室的 git server 呢？&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="git" scheme="https://www.lovesofttech.com/categories/git/"/>
    
      <category term="同步代码" scheme="https://www.lovesofttech.com/categories/git/%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="git" scheme="https://www.lovesofttech.com/tags/git/"/>
    
      <category term="同步代码" scheme="https://www.lovesofttech.com/tags/%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7，一键远程部署 spring boot 项目和 react 项目</title>
    <link href="https://www.lovesofttech.com/linux/CentOS7RemoteDeploy/"/>
    <id>https://www.lovesofttech.com/linux/CentOS7RemoteDeploy/</id>
    <published>2019-09-04T16:00:00.000Z</published>
    <updated>2019-09-06T14:38:23.392Z</updated>
    
    <content type="html"><![CDATA[<p>两种场景：</p><ol><li>服务器不能上外网。</li><li>服务器可以上外网。</li></ol><a id="more"></a><h1 id="场景一，服务器不能上外网"><a href="#场景一，服务器不能上外网" class="headerlink" title="场景一，服务器不能上外网"></a>场景一，服务器不能上外网</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>需要在一台不能上外网的 CentOS7 服务器 A 上部署前后端分离的项目，采用 spring boot + react，需要在有代码更新之后，可以一键部署最新版本。</li><li>服务器 A 限制上外网，是基于业务和安全方面的考虑。</li><li>那么问题来了，这台服务器不能上外网，意味着不能下载依赖，无论是 spring boot 项目还是 react 项目，都需要下载依赖才能编译的。</li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><a href="/linux/centOS7ScpAndRemoteSsh">CentOS7，使用 scp 命令, ssh 连接方式，免密码传输文件到远程服务器，免密执行远程服务器上的 shell 脚本</a></li></ul><h2 id="方案，用-shell-脚本搞定一切"><a href="#方案，用-shell-脚本搞定一切" class="headerlink" title="方案，用 shell 脚本搞定一切"></a>方案，用 shell 脚本搞定一切</h2><ul><li>需要一台可以上外网的 CentOS7 服务器（可以是虚拟机）B，这台服务器可以访问服务器 A。</li><li>当需要部署新版时，执行服务器 B 上的部署脚本，执行一次即可，相当于一键部署，可极大的节约部署时间成本。</li></ul><p>以下是具体步骤：</p><ul><li>项目代码托管可以采用 gitee.com、github.com、coding.net 等，也可以自己搭建，可参考：<a href="/git/centOS7GitAsServer">CentOS 7.5 借助 Gitolite 管理 Git 项目</a>。</li><li>在服务器 B 上配置无密码获取代码，如果是自己搭建 git server，这可以通过前置知识介绍的，用 SSH 公钥建立信任关系达到，如果用第三方比如 gitee.com，也是可以利用公钥或私钥来达到目的。</li><li>服务器 B 上的 shell 部署脚本，功能是：<ul><li>获取最新代码。</li><li>编译。</li><li>通过前置知识介绍的 scp 无密传输文件的方式，将编译好的文件上传到服务器 A 的固定目录，如：~/upload。<ul><li>针对 spring boot 项目，需要上传 boot 项目的 jar/war 包。</li><li>针对前端项目，则把编译好的文件（我用的是 Ant Design Pro，编译文件存放在 dist 目录）打包再上传，假如打包后的文件名是：<code>UI.tar.gz</code>。</li></ul></li><li>通过前置知识介绍的 ssh 执行远程服务器上脚本的方式，执行服务器 A 上的部署脚本。</li></ul></li><li>服务器 A 上的部署脚本功能如下：<ul><li>针对 spring boot 项目，这里以 tomcat 运行的方式为例：<ul><li>停止 tomcat。如果该 tomcat 部署的是后台任务，停止 tomcat 之前先停止后台任务，延时 10 来秒（可自己定义）之后再停止 tomcat。</li><li>删除 app 目录下的所有文件，解压新的 war 包到 app 目录，恢复配置文件至 <code>app 目录/WEB-INF/classes/</code>。配置文件是单独存放的。</li><li>启动 tomcat。</li></ul></li><li>针对前端 react 项目，因为是静态网页文件，所以可以简单粗暴的作如下两步操作：<ul><li>删除 app 目录下的所有文件。</li><li>解压新版本 tar 包 <code>UI.tar.gz</code>（从服务器 B 上传）至 app 目录下。</li><li>由于前端是静态网页，使用 nginx 部署，不需要重启，客户端重新访问的时候会自动更新。</li></ul></li></ul></li></ul><h1 id="场景二，服务器可以上外网"><a href="#场景二，服务器可以上外网" class="headerlink" title="场景二，服务器可以上外网"></a>场景二，服务器可以上外网</h1><p>当然，可以上外网也可以采用方案一的方式，只不过，可以把方案一中的服务器 A 和服务器 B 合二为一。</p><p>这里介绍另外一种方式，借助强大的 jenkins 来实现，参考：<a href="/linux/centOS7JenkinsAutoDeploy">CentOS 7.5 jenkins + Maven + Git + Tomcat 一键发布</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两种场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务器不能上外网。&lt;/li&gt;
&lt;li&gt;服务器可以上外网。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/categories/CentOS/"/>
    
      <category term="scp" scheme="https://www.lovesofttech.com/categories/CentOS/scp/"/>
    
      <category term="ssh" scheme="https://www.lovesofttech.com/categories/CentOS/scp/ssh/"/>
    
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/tags/CentOS/"/>
    
      <category term="scp" scheme="https://www.lovesofttech.com/tags/scp/"/>
    
      <category term="ssh" scheme="https://www.lovesofttech.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7，使用 scp 命令, ssh 连接方式，免密码传输文件到远程服务器，免密执行远程服务器上的 shell 脚本</title>
    <link href="https://www.lovesofttech.com/linux/centOS7ScpAndRemoteSsh/"/>
    <id>https://www.lovesofttech.com/linux/centOS7ScpAndRemoteSsh/</id>
    <published>2019-09-02T16:00:00.000Z</published>
    <updated>2019-09-16T13:56:06.266Z</updated>
    
    <content type="html"><![CDATA[<p>如题<br><a id="more"></a></p><h1 id="安装-scp"><a href="#安装-scp" class="headerlink" title="安装 scp"></a>安装 scp</h1><p>如果提示：<code>-bash: scp: command not found</code>, 执行下面的命令安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssh-clients</span><br></pre></td></tr></table></figure></p><h1 id="免密码配置"><a href="#免密码配置" class="headerlink" title="免密码配置"></a>免密码配置</h1><ul><li>通常用scp命令通过ssh获取对方linux主机文件的时候都需要输入密码确认，不过通过建立信任关系，可以实现不输入密码。</li><li>建立的信任关系可在两台服务器的任何用户之间，下面的示例，两台服务器的用户都是 root，实际操作时，把 root 换成你的真实用户名即可。</li><li>假设：<ul><li>传输文件的服务器 S（source） 的IP：192.168.1.100</li><li>接收文件的服务器 T（target） 的IP：192.168.1.101</li></ul></li><li>目标：从服务器 S 免密码传文件至服务器 T</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>如果 T 的 <code>~/.ssh/</code> 目录不存在，就手动创建，<code>mkdir -p ~/.ssh</code>。</li><li><p>在服务器 S 上执行命令 <code>ssh-keygen -t rsa</code> 来生成密钥，一路回车就行了。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory &apos;/root/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:7EM99i0eL03+glViCN0cn+9ELeM8J2sLyvDW26SaB/g root@localhost.localdomain</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|           . o.. |</span><br><span class="line">|          . . o.o|</span><br><span class="line">|           . .o.+|</span><br><span class="line">|       . .  .oo+o|</span><br><span class="line">|        S.+  .=o+|</span><br><span class="line">|       o...o .oB |</span><br><span class="line">|        +. o=*= .|</span><br><span class="line">|         =E+=X+. |</span><br><span class="line">|         .*o+o+o.|</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></li><li><p>将服务器 S <code>/root/.ssh/</code> 目录中的 <code>id_rsa.pub</code> 文件内容复制到服务器 T <code>/root/.ssh/</code> 目录下的 authorized_keys 文件中，注意是文件内容：</p><ul><li>如果 T 的 <code>/root/.ssh/</code> 目录下没有 authorized_keys 文件，就上传并改名为 authorized_keys：<code>scp .ssh/id_rsa.pub root@192.168.1.101:~/.ssh/authorized_keys</code></li><li>如果 T 的 <code>~/.ssh/</code> 目录已经存在 authorized_keys 文件，用 <code>cat &gt;&gt;</code>  命令将公钥文件 <code>id_rsa.pub</code> 的内容添加进去，文件 authorized_keys 是可以包含多个 SSH 验证信息的。<ul><li>在服务器 S 上执行 <code>scp ~/.ssh/id_rsa.pub root@192.168.1.101:~/.ssh/s.pub</code></li><li>在服务器 T 上执行 <code>cat ~/.ssh/s.pub &gt;&gt; ~/.ssh/authorized_keys</code></li></ul></li></ul></li></ol><p>以后从服务器 S 通过 scp 传文件到服务器 T 就不需要密码了。</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>这种方式传文件，如果目标服务器的目标文件夹下存在同名文件，会<strong>在没有任何提示的情况下被覆盖掉</strong>。</p><h1 id="上传下载"><a href="#上传下载" class="headerlink" title="上传下载"></a>上传下载</h1><ol><li>上传本地文件到服务器：<code>scp /path/filename username@servername:/path/</code></li><li>上传整个目录到服务器：<code>scp -r local_dir username@servername:remote_dir</code></li><li>从服务器上下载文件：<code>scp username@servername:/path/filename /var/www/local_dir</code></li><li>从服务器下载整个目录：<code>scp -r username@servername:/var/www/remote_dir/ /var/www/local_dir</code></li></ol><h1 id="执行远程服务器上的-shell-脚本"><a href="#执行远程服务器上的-shell-脚本" class="headerlink" title="执行远程服务器上的 shell 脚本"></a>执行远程服务器上的 shell 脚本</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>ssh + 建立好信任关系的用户名@远程服务器IP地址 + “第一个 shell 指令; 另一个 shell 指令”，如：<code>ssh utomcat@IP &quot;cd ~/tomcat/dev/job ; ls -l --color=auto&quot;</code></p><ol><li>如果指令不止一个，必须要加双引号，否则，除了第一个指令，其余指令将会在本地执行。</li><li>两个指令之间用分号隔开。</li></ol><h2 id="示例一：查看远程服务器文件列表"><a href="#示例一：查看远程服务器文件列表" class="headerlink" title="示例一：查看远程服务器文件列表"></a>示例一：查看远程服务器文件列表</h2><p>远程服务器上的 <code>~/tomcat/dev/job</code> 为 tomcat 目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[utomcat@localhost logs]$ ssh utomcat@192.168.1.101 &quot;cd ~/tomcat/dev/job ; ls -l --color=auto&quot;</span><br><span class="line">total 128</span><br><span class="line">drwxr-x---. 3 utomcat gtomcat  4096 Aug 17 23:43 bin</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat 18982 Aug 17 23:43 BUILDING.txt</span><br><span class="line">drwxr-x---. 3 utomcat gtomcat    18 Aug 17 23:43 C:</span><br><span class="line">drwx------. 3 utomcat gtomcat   254 Aug 17 23:44 conf</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat  5407 Aug 17 23:43 CONTRIBUTING.md</span><br><span class="line">drwxr-x---. 2 utomcat gtomcat  4096 Aug 17 23:43 lib</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat 57092 Aug 17 23:43 LICENSE</span><br><span class="line">drwxr-x---. 2 utomcat gtomcat  4096 Sep  3 09:30 logs</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat  2333 Aug 17 23:43 NOTICE</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat  3255 Aug 17 23:43 README.md</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat  6852 Aug 17 23:43 RELEASE-NOTES</span><br><span class="line">-rw-r-----. 1 utomcat gtomcat 16262 Aug 17 23:43 RUNNING.txt</span><br><span class="line">drwxr-x---. 2 utomcat gtomcat    30 Aug 17 23:43 temp</span><br><span class="line">drwxr-x---. 7 utomcat gtomcat    81 Aug 17 23:43 webapps</span><br><span class="line">drwxr-x---. 3 utomcat gtomcat    22 Sep  2 09:57 work</span><br></pre></td></tr></table></figure></p><h2 id="示例二：执行远程服务器上的-shell-脚本文件并同步监听-tomcat-日志"><a href="#示例二：执行远程服务器上的-shell-脚本文件并同步监听-tomcat-日志" class="headerlink" title="示例二：执行远程服务器上的 shell 脚本文件并同步监听 tomcat 日志"></a>示例二：执行远程服务器上的 shell 脚本文件并同步监听 tomcat 日志</h2><ul><li>远程服务器上的脚本文件 <code>reBuildAndRestartTomcatAndTailLog.sh</code> 作用是获取 java 项目最新代码并重新编译，编译完成之后重启 tomcat 并监听 tomcat 日志变化。</li><li>先在远程服务器终端执行 <code>tail -f ~/tomcat/logs/catalina.out</code> 监听 tomcat 日志，观察 tomcat 是否会被重启。</li><li>然后，在本地服务器的终端执行：<code>ssh utomcat@192.168.1.101 &quot;~/shell/reBuildAndRestartTomcatAndTailLog.sh&quot;</code>。</li><li>执行结果，远程服务器的日志文件 catalina.out 已经开始有变化了，从变化看，tomcat 正在重启，同时，本地终端也同步显示了此日志的变化情况，如下图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/remoteShell.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如题&lt;br&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/categories/CentOS/"/>
    
      <category term="scp" scheme="https://www.lovesofttech.com/categories/CentOS/scp/"/>
    
      <category term="ssh" scheme="https://www.lovesofttech.com/categories/CentOS/scp/ssh/"/>
    
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/tags/CentOS/"/>
    
      <category term="scp" scheme="https://www.lovesofttech.com/tags/scp/"/>
    
      <category term="ssh" scheme="https://www.lovesofttech.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design Pro v4 从后端下载 excel，后端返回的是文件流</title>
    <link href="https://www.lovesofttech.com/react/antDesignProDownloadExcel/"/>
    <id>https://www.lovesofttech.com/react/antDesignProDownloadExcel/</id>
    <published>2019-08-29T16:00:00.000Z</published>
    <updated>2019-08-30T14:06:59.574Z</updated>
    
    <content type="html"><![CDATA[<p>前后端分离，后端返回文件流，在前端通过请求 api 的方式下载 excel 文件。<br><a id="more"></a></p><h1 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h1><ul><li>适用于 v4，应该也适用于 v2.3.1，在 v4 版本下测试通过，如果用的是 v2.3.0，请看最后面的修改方式。</li><li>另外，刚用 TypeScript，因为还不是很熟，有些地方还不符合 TypeScript 的编码规范，先将就看~~<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">excelDownload</span>(<span class="params">url, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tokenSessionStorage: string | <span class="literal">null</span> = sessionStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">  <span class="keyword">let</span> excelFileName : string | <span class="literal">null</span> = options.body.excelFileName;</span><br><span class="line"></span><br><span class="line">  options = &#123; <span class="attr">credentials</span>: <span class="string">'include'</span>, ...options &#125;;</span><br><span class="line">  options.body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    method: url,</span><br><span class="line">    jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.body),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  options.headers = &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">    Authorization: tokenSessionStorage,</span><br><span class="line">    ...options.headers,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fetch(url, options)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.blob())</span><br><span class="line">    .then(<span class="function"><span class="params">blobData</span> =&gt;</span> &#123;</span><br><span class="line">      download(blobData, excelFileName);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">blobData: Blob, forDownLoadFileName: string | null</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink);</span><br><span class="line">  aLink.style.display = <span class="string">'none'</span>;</span><br><span class="line">  aLink.href = <span class="built_in">window</span>.URL.createObjectURL(blobData);</span><br><span class="line">  aLink.setAttribute(<span class="string">'download'</span>, forDownLoadFileName);</span><br><span class="line">  aLink.click();</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>前端提交请求的参数体，用的是 options.data，参照了登录的 api 请求方法，在文件 <code>src\services\login.ts</code> 中定义。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export async function fakeAccountLogin(params: LoginParamsType) &#123;</span><br><span class="line">  return request(&apos;/api/auth/login&apos;, &#123;</span><br><span class="line">    method: &apos;POST&apos;,</span><br><span class="line">    data: params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我的方法是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export async function exportToExcelCollectionDetail(params) &#123;</span><br><span class="line">  return excelDownload(&apos;/api/exportToExcel/collectionDetail&apos;, &#123;</span><br><span class="line">    method: &apos;POST&apos;,</span><br><span class="line">    data: params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>调用前将 data 转换成 json 数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options.data = JSON.stringify(&#123;</span><br><span class="line">  method: url,</span><br><span class="line">  jsonStringParameter: JSON.stringify(options.data),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在后端，只有 method 有值，jsonStringParameter 被“吞”掉了，就象没有传这个参数一样，所以，得到的值是 null。</p><p>各种查资料，后来在 <a href="https://github.com/github/fetch" target="_blank" rel="noopener">fetch 的 github 项目</a>看到，Post JSON，请求的参数用的是 body，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/users'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name: <span class="string">'Hubot'</span>,</span><br><span class="line">    login: <span class="string">'hubot'</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>于是，将 options.data 改为 options.body：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">options.body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  method: url,</span><br><span class="line">  jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.body),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>记得调用方也要改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">exportToExcelCollectionDetail</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> excelDownload(<span class="string">'/api/exportToExcel/collectionDetail'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>竟然就可以了！</p><p>在查询数据，以及登录功能，都用的是关键字 data，能正常传递参数，不过，调用的是 umi-request 封装过的 fetch，umi-request 对参数的定义是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface RequestOptionsInit extends RequestInit &#123;</span><br><span class="line">  charset?: <span class="string">'utf8'</span> | <span class="string">'gbk'</span>;</span><br><span class="line">  requestType?: <span class="string">'json'</span> | <span class="string">'form'</span>;</span><br><span class="line">  data?: any;</span><br><span class="line">  params?: object;</span><br><span class="line">  responseType?: ResponseType;</span><br><span class="line">  useCache?: boolean;</span><br><span class="line">  ttl?: number;</span><br><span class="line">  timeout?: number;</span><br><span class="line">  errorHandler?: <span class="function">(<span class="params">error: ResponseError</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  prefix?: string;</span><br><span class="line">  suffix?: string;</span><br><span class="line">  throwErrIfParseFail?: boolean;</span><br><span class="line">  parseResponse?: boolean;</span><br><span class="line">  cancelToken?: CancelToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="后端导出-excel-文件的代码片断"><a href="#后端导出-excel-文件的代码片断" class="headerlink" title="后端导出 excel 文件的代码片断"></a>后端导出 excel 文件的代码片断</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置response头信息</span></span><br><span class="line">response.reset();</span><br><span class="line">response.setContentType(<span class="string">"application/x-download;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename="</span> + URLEncoder.encode(excelFileName, <span class="string">"UTF-8"</span>) + <span class="string">".xls"</span>);</span><br><span class="line">    <span class="comment">//创建一个WorkBook,对应一个Excel文件</span></span><br><span class="line">    HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">    <span class="comment">//在Workbook中，创建一个sheet，对应Excel中的工作薄（sheet）</span></span><br><span class="line">    HSSFSheet sheet = wb.createSheet(excelFileName);</span><br><span class="line">    HSSFCellStyle headerStyle = getStyleHeader(wb);</span><br><span class="line">    <span class="comment">// 填充工作表</span></span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将文件输出</span></span><br><span class="line">    OutputStream outputStream = response.getOutputStream();</span><br><span class="line">    wb.write(outputStream);</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line">    wb.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ant-design-pro-v2-3-0-版本，导出-excel"><a href="#ant-design-pro-v2-3-0-版本，导出-excel" class="headerlink" title="ant design pro v2.3.0 版本，导出 excel"></a>ant design pro v2.3.0 版本，导出 excel</h1><p>修改 <code>src\utils\request.js</code>，在以下代码的 return 之前：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    fetch(url, newOptions)</span><br><span class="line">      .then(checkStatus)</span><br><span class="line">      <span class="comment">//.then(response =&gt; cachedSave(response, hashcode))</span></span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// codes</span></span><br></pre></td></tr></table></figure></p><p>添加以下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (url.includes(<span class="string">'exportToExcel'</span>)) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; excelFileName &#125; = options.body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fetch(url, newOptions)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.blob())</span><br><span class="line">    .then(<span class="function"><span class="params">blobData</span> =&gt;</span> &#123;</span><br><span class="line">      download(blobData, excelFileName);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前提是，下载 excel 的 api 路径都要添加 <code>exportToExcel</code>。<br>其中，download 方法在 v2 与 v4 通用，请参照 v4 的代码。<br>对 newOptions 的处理，在 <code>if (!(newOptions.body instanceof FormData)) {</code> 下添加：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">newOptions.headers = &#123;</span><br><span class="line">  Authorization: token,</span><br><span class="line">  Accept: <span class="string">'application/json'</span>,</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">  ...newOptions.headers,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">newOptions.body = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">  method: url,</span><br><span class="line">  jsonStringParameter: <span class="built_in">JSON</span>.stringify(newOptions.body),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前后端分离，后端返回文件流，在前端通过请求 api 的方式下载 excel 文件。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="https://www.lovesofttech.com/categories/react/"/>
    
      <category term="Ant Design Pro" scheme="https://www.lovesofttech.com/categories/react/Ant-Design-Pro/"/>
    
      <category term="excel 文件流下载" scheme="https://www.lovesofttech.com/categories/react/Ant-Design-Pro/excel-%E6%96%87%E4%BB%B6%E6%B5%81%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="react" scheme="https://www.lovesofttech.com/tags/react/"/>
    
      <category term="Ant Design Pro" scheme="https://www.lovesofttech.com/tags/Ant-Design-Pro/"/>
    
      <category term="excel 文件流下载" scheme="https://www.lovesofttech.com/tags/excel-%E6%96%87%E4%BB%B6%E6%B5%81%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 个人博客使用 github pages 和 coding.net 静态网站，同时兼顾国内外访问以及 google 和 baidu 爬虫</title>
    <link href="https://www.lovesofttech.com/general/hexoBlogSEO/"/>
    <id>https://www.lovesofttech.com/general/hexoBlogSEO/</id>
    <published>2019-08-27T16:00:00.000Z</published>
    <updated>2019-08-30T14:06:59.547Z</updated>
    
    <content type="html"><![CDATA[<ul><li>之前在百度上搜索不到自己博客的内容，原来是百度爬虫被 github 屏蔽了。</li><li>本文介绍让百度爬虫爬取自己博客的方法，同时兼顾国内外访问，兼顾 google 和 baidu 爬虫收录网站。</li></ul><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><ul><li>github pages 百度不能爬取，因为 github 屏蔽了百度爬虫。</li><li>在继续使用 github pages 的前提下，通过使用 <a href="https://coding.net/" target="_blank" rel="noopener">coding.net</a> 的静态网站（之前也叫 pages）让百度爬取。</li><li>这需要配合域名解析实现，实现之后，百度爬取时实际上访问的是 coding.net 的静态网站。</li><li><strong>不过，coding.net 的静态网站不够稳定，后来我还是把解析线路的默认指向了 github.com。访问网站时慢点儿，但稳定，总比直接不能访问要强。</strong></li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>将 hexo blog 编译好的版本提交到 github.com 的同时，也提交到 coding.net，coding.net 可以设置有代码更新自动部署，github.com 是自动的，不需要设置。</li><li>coding.net 绑定自定义域名。<ul><li>在绑定之前，需要添加域名 CNAME 记录，指向 coding.net 的静态网站域名，比如我的是：<code>y5561p.coding-pages.com</code>。</li><li>停止之前设置的 github.com 的解析。</li><li>过大概10分钟，再绑定，绑定时开启强制 HTTPS 访问，强制 HTTPS 访问需要申请证书，如果显示申请失败就再申请就是了。</li><li>待证书状态为【正常】之后，再将之前停止的 CNAME 启用，即启用解析到 github.com 的 CNAME。</li></ul></li><li>域名解析注意事项，这里以阿里云的域名为例。<ul><li>解析到 github.com 的 CNAME，解析线路选择【境外】</li><li>解析到 coding.net 的，解析线路选择【默认】</li><li>设置搜索引擎解析。<ul><li>谷歌和必应的解析项，指到 github.com。</li><li>百度的解析项，指到 coding.net。</li></ul></li></ul></li></ol><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/hexoDNS.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>域名设置部分，因为顶级域名（lovesofttech.com）设置了 MX 记录，所以顶级域名（lovesofttech.com）不能再设置 CNAME 了（会冲突），所以，我设置了各大运营商（电信、联通等）的线路，不清楚是否管用。</li></ul><h2 id="如此折腾的好处"><a href="#如此折腾的好处" class="headerlink" title="如此折腾的好处"></a>如此折腾的好处</h2><ul><li>如此设置之后，百度就可以正常爬取博客内容了。</li><li>只有在境外访问才会解析到 github.com。</li><li>兼顾了国内外访问，同时兼顾了 google 和 baidu 爬虫，可谓一举多得。至少在国内访问的速度比之前快了非常多，有飞一般的感觉（可惜并不稳定，慢的时候就是直接不能访问）。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;之前在百度上搜索不到自己博客的内容，原来是百度爬虫被 github 屏蔽了。&lt;/li&gt;
&lt;li&gt;本文介绍让百度爬虫爬取自己博客的方法，同时兼顾国内外访问，兼顾 google 和 baidu 爬虫收录网站。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://www.lovesofttech.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://www.lovesofttech.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Ant Design Pro v4 开发备忘，TypeScript 版本</title>
    <link href="https://www.lovesofttech.com/react/antDesignProTs/"/>
    <id>https://www.lovesofttech.com/react/antDesignProTs/</id>
    <published>2019-08-25T16:00:00.000Z</published>
    <updated>2019-08-30T14:06:59.577Z</updated>
    
    <content type="html"><![CDATA[<p>官方项目里的版本为1.0.0，实际上习惯称这个版本为 v4，相对之前的版本，改动比较大。请参考：<a href="https://zhuanlan.zhihu.com/p/67498559" target="_blank" rel="noopener">Ant Design Pro v4 is Here</a><br><a id="more"></a></p><h1 id="Ant-Design-Pro-相关文档"><a href="#Ant-Design-Pro-相关文档" class="headerlink" title="Ant Design Pro 相关文档"></a>Ant Design Pro 相关文档</h1><ul><li><a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">github 地址</a></li><li><a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">中文文档</a></li><li><a href="https://pro.ant.design/docs/block-cn" target="_blank" rel="noopener">区块中文文档</a></li></ul><h1 id="下载区块"><a href="#下载区块" class="headerlink" title="下载区块"></a>下载区块</h1><p>在 windows 10 下 <code>npm run fetch:blocks</code>，总是非常慢，还经常卡住不动，而且即使显示执行成功，实际上有好多文件没有下载完，导致启动（npm start）时会报错，我遇到的错误提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> ERROR  Failed to compile with 1 errors                                                                                                                                                                                                                                  21:35:10</span><br><span class="line"></span><br><span class="line">This relative module was not found:</span><br><span class="line"></span><br><span class="line">* ../list/search in ./src/pages/.umi/router.js</span><br><span class="line"></span><br><span class="line"> ERROR CODE  ERR_WEBPACK_MODULE_NOT_FOUND</span><br><span class="line"># ...</span><br></pre></td></tr></table></figure></p><p>原因就是有文件没有下载下来。修复这个错，找到下面三行，并注释掉两行，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//path: &apos;/list/search&apos;,</span><br><span class="line">name: &apos;search-list&apos;,</span><br><span class="line">//component: &apos;./list/search&apos;,</span><br></pre></td></tr></table></figure></p><p>如此修改之后，可以运行起来了，但还是有好些页面找不到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">umi development 404 page</span><br><span class="line">There&apos;s not a page yet at /dashboard/analysis.</span><br><span class="line"></span><br><span class="line">Create a React.js component in your pages directory at src/pages/dashboard/analysis.js and configure the route in config file then this page will automatically refresh to show the new page component you created.</span><br></pre></td></tr></table></figure></p><h2 id="最佳实践来了"><a href="#最佳实践来了" class="headerlink" title="最佳实践来了"></a>最佳实践来了</h2><ul><li>在 CentOS 7 下执行同样的操作，发现非常顺利。</li><li>下载好后，把文件复制到 windows 下再做开发和研究。</li></ul><h1 id="与后端-api-交互"><a href="#与后端-api-交互" class="headerlink" title="与后端 api 交互"></a>与后端 api 交互</h1><h2 id="第一步，设置代理"><a href="#第一步，设置代理" class="headerlink" title="第一步，设置代理"></a>第一步，设置代理</h2><p>找到 config/config.ts 文件的以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">proxy: &#123;</span><br><span class="line">  &apos;/server/api/&apos;: &#123;</span><br><span class="line">    target: &apos;https://preview.pro.ant.design/&apos;,</span><br><span class="line">    changeOrigin: true,</span><br><span class="line">    pathRewrite: &#123; &apos;^/server&apos;: &apos;&apos; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">'/api/'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://localhost:89'</span>,</span><br><span class="line">    changeOrigin: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// pathRewrite: &#123; '^/server': '' &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>其中 <code>http://localhost:89</code> 为后端 api 地址，<code>/api/</code> 为请求 api 的前缀，可根据自己的项目情况灵活修改。</p><h2 id="第二步，前端修改"><a href="#第二步，前端修改" class="headerlink" title="第二步，前端修改"></a>第二步，前端修改</h2><p>参考官方文档：<a href="https://pro.ant.design/docs/server-cn" target="_blank" rel="noopener">和服务端进行交互</a></p><h3 id="前端请求流程"><a href="#前端请求流程" class="headerlink" title="前端请求流程"></a>前端请求流程</h3><p>在 Ant Design Pro 中，一个完整的前端 UI 交互到服务端处理流程是这样的：</p><ol><li>UI 组件交互操作；</li><li>调用 model 的 effect；</li><li>调用统一管理的 service 请求函数；</li><li>使用封装的 request.ts 发送请求；</li><li>获取服务端返回；</li><li>然后调用 reducer 改变 state；</li><li>更新 model。</li></ol><h4 id="以登录为例"><a href="#以登录为例" class="headerlink" title="以登录为例"></a>以登录为例</h4><ul><li>修改文件 package.json 的启动参数： <code>&quot;start&quot;: &quot;set port=96 &amp;&amp; umi dev&quot;,</code>，执行 <code>npm start</code> 之后，登录页面的地址为：<code>http://localhost:96/user/login</code>，对应的页面文件：<code>src\pages\user\login\index.tsx</code></li><li>登录用到的 model 文件:<code>src\models\login.ts</code></li><li><p>登录触发的函数是：handleSubmit，提交登录请求 dispatch 代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dispatch(&#123;</span><br><span class="line">    type: <span class="string">'login/login'</span>,</span><br><span class="line">    payload: &#123;</span><br><span class="line">      ...values,</span><br><span class="line">      type,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>其中第一个 login 为 module <code>src\models\login.ts</code> 的 namespace。</p></li><li><p>第二个 login 为 <code>src\models\login.ts</code> 定义的 effect 下的具体的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*login(&#123; payload &#125;, &#123; call, put &#125;) &#123;</span><br><span class="line">      <span class="keyword">const</span> response = <span class="keyword">yield</span> call(fakeAccountLogin, payload);</span><br><span class="line">      <span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li><p>fakeAccountLogin 为调用的 api，也就是统一管理的 service 请求函数。在文件：<code>src\services\login.ts</code>中定义，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fakeAccountLogin</span>(<span class="params">params: LoginParamsType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(<span class="string">'/api/auth/login'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    data: params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其中 <code>/api/auth/login</code> 为后端 api 真正的地址，访问的时候会自动拼接成：<code>http://localhost:89/api/auth/login</code></p></li><li>登录的时候，在后端打一个断点，就可以看到请求参数了，不过，参数格式以及提交方式还需要根据自己的后端项目做相应修改，下面会以 spring boot 项目为例进行讲解。</li></ul><h2 id="第三步，前后端参数进行匹配"><a href="#第三步，前后端参数进行匹配" class="headerlink" title="第三步，前后端参数进行匹配"></a>第三步，前后端参数进行匹配</h2><p>后端是 spring boot 项目，提供 restful api，Controller 定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录授权</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/auth/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ApiResponse <span class="title">login</span><span class="params">(@RequestBody AuthorizationUserRequest authorizationUserRequest)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> SysUserService.userLogin(authorizationUserRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中，AuthorizationUserRequest 为接收前台传过去的参数的 POJO，定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationUserRequest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@NotBlank</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String type; <span class="comment">// 前端需要</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>POJO 的成员名与前台提交的参数名和类型一一对应即可。</p><h1 id="前端对请求参数做统一加工（封装）"><a href="#前端对请求参数做统一加工（封装）" class="headerlink" title="前端对请求参数做统一加工（封装）"></a>前端对请求参数做统一加工（封装）</h1><p>参考：<a href="https://github.com/umijs/umi-request/blob/master/README_zh-CN.md" target="_blank" rel="noopener">https://github.com/umijs/umi-request/blob/master/README_zh-CN.md</a></p><h2 id="对请求参数做处理，适配后端-api-对参数的需要"><a href="#对请求参数做处理，适配后端-api-对参数的需要" class="headerlink" title="对请求参数做处理，适配后端 api 对参数的需要"></a>对请求参数做处理，适配后端 api 对参数的需要</h2><ul><li>重要：<code>src\services\login.ts</code> 文件中，将 <code>import request from &#39;umi-request&#39;;</code> 改为 <code>import request from &#39;@/utils/request&#39;;</code>。</li><li>以下代码，添加到 <code>src\utils\request.ts</code>文件中，<code>export default request;</code> 之前。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request拦截器, 改变 options.</span></span><br><span class="line">request.interceptors.request.use(<span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">  options.data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    method: url,</span><br><span class="line">    jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.data),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;</span><br><span class="line">      options: &#123; ...options &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>如此修改之后，后端报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">error: &quot;Unsupported Media Type&quot;</span><br><span class="line">message: &quot;Content type &apos;text/plain;charset=UTF-8&apos; not supported&quot;</span><br><span class="line">path: &quot;/api/auth/login&quot;</span><br><span class="line">status: 415</span><br><span class="line">timestamp: &quot;2019-08-28T17:11:55.511+0800&quot;</span><br><span class="line">trace: &quot;org.springframework.web.HttpMediaTypeNotSupportedException: Content type &apos;text/plain;charset=UTF-8&apos; not supported</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>解决，增加对 headers 参数的修改。增加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept: &apos;application/json&apos;,</span><br><span class="line">&apos;Content-Type&apos;: &apos;application/json; charset=utf-8&apos;,</span><br></pre></td></tr></table></figure></p><h2 id="增加请求头参数"><a href="#增加请求头参数" class="headerlink" title="增加请求头参数"></a>增加请求头参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">request.interceptors.request.use(<span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">  options.data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    method: url,</span><br><span class="line">    jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.data),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  options.headers = &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">    ...options.headers,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &#123;</span><br><span class="line">      options: &#123; ...options &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="对-token-进行判断，把-token-添加到请求头-headers"><a href="#对-token-进行判断，把-token-添加到请求头-headers" class="headerlink" title="对 token 进行判断，把 token 添加到请求头 headers"></a>对 token 进行判断，把 token 添加到请求头 headers</h2><p>如果 token 没有值，同时不是登录页面，则直接跳转到登录页面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request拦截器, 改变 options.</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line @typescript-eslint/ban-ts-ignore</span></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line">request.interceptors.request.use(<span class="function">(<span class="params">url, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> tokenSessionStorage: string | <span class="literal">null</span> = sessionStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((tokenSessionStorage === <span class="literal">null</span> || tokenSessionStorage.length === <span class="number">0</span>) &amp;&amp; url !== <span class="string">'/api/auth/login'</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">'/user/login'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tokenSessionStorage === <span class="literal">null</span>) &#123;</span><br><span class="line">    tokenSessionStorage = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options.data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    method: url,</span><br><span class="line">    jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.data),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  options.headers = &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">    Authorization: tokenSessionStorage,</span><br><span class="line">    ...options.headers,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eslint-disable-next-line consistent-return</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    options: &#123; ...options &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h1 id="前端对调用-api-返回的结果做统一处理"><a href="#前端对调用-api-返回的结果做统一处理" class="headerlink" title="前端对调用 api 返回的结果做统一处理"></a>前端对调用 api 返回的结果做统一处理</h1><p>经过测试，官方文档中介绍的 response 拦截器，其中的 response 并不是后端返回来的数据，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response拦截器, 处理response</span></span><br><span class="line">request.interceptors.response.use(<span class="function">(<span class="params">response, options</span>) =&gt;</span> &#123;</span><br><span class="line">  response.headers.append(<span class="string">'interceptors'</span>, <span class="string">'yes yo'</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/react/antDesignProResponse01.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不过，官方文档中介绍的中间件 <code>request.use</code>，得到的 res（response） 是后端返回的数据，代码如下（根据自己的业务有修改）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件，对请求前、响应后做处理</span></span><br><span class="line">request.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; res &#125; = ctx;</span><br><span class="line">  <span class="keyword">let</span> &#123; token &#125; = res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token !== <span class="literal">undefined</span> &amp;&amp; token !== <span class="literal">null</span> &amp;&amp; token.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    token = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    sessionStorage.setItem(<span class="string">'token'</span>, token);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/react/antDesignProResponse02.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="把-request-拦截器的逻辑写到-request-use-中间件，让中间件把请求前和响应后的处理逻辑都做了"><a href="#把-request-拦截器的逻辑写到-request-use-中间件，让中间件把请求前和响应后的处理逻辑都做了" class="headerlink" title="把 request 拦截器的逻辑写到 request.use 中间件，让中间件把请求前和响应后的处理逻辑都做了"></a>把 request 拦截器的逻辑写到 request.use 中间件，让中间件把请求前和响应后的处理逻辑都做了</h1><ul><li>请求前：<ul><li>修改请求参数 options 以适配后端 api。</li><li>添加 headers 参数以适配后端 api。</li><li>非登录页面，需要有 token，如果没有直接跳转到登录页面。</li><li>非登录页面，需要把 token 添加到请求头，后端 api 需要鉴权。</li></ul></li><li>响应后，把后端返回的最新 token 写到 sessionStorage。<ul><li>后端 api 在每次请求后，如果不是 excel 文件下载这类请求，都会把更新后的 token 返回调用端。</li><li>当然，也可以全局性的对返回结果进行判断，如 api 返回错误，要如何提示以及如何处理等。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中间件，对请求前、响应后做处理</span></span><br><span class="line">request.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; req &#125; = ctx;</span><br><span class="line">  <span class="keyword">const</span> &#123; url, options &#125; = req;</span><br><span class="line">  <span class="keyword">let</span> tokenSessionStorage: string | <span class="literal">null</span> = sessionStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// eslint-disable-next-line max-len</span></span><br><span class="line">  <span class="keyword">if</span> ((tokenSessionStorage === <span class="literal">null</span> || tokenSessionStorage.length === <span class="number">0</span>) &amp;&amp; url !== <span class="string">'/api/auth/login'</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">'/user/login'</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (tokenSessionStorage === <span class="literal">null</span>) &#123;</span><br><span class="line">    tokenSessionStorage = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options.data = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    method: url,</span><br><span class="line">    jsonStringParameter: <span class="built_in">JSON</span>.stringify(options.data),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  options.headers = &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span>,</span><br><span class="line">    Authorization: tokenSessionStorage,</span><br><span class="line">    ...options.headers,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> next();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; res &#125; = ctx;</span><br><span class="line">  <span class="keyword">let</span> &#123; token &#125; = res;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (token !== <span class="literal">undefined</span> &amp;&amp; token !== <span class="literal">null</span> &amp;&amp; token.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    token = <span class="string">`Bearer <span class="subst">$&#123;token&#125;</span>`</span>;</span><br><span class="line">    sessionStorage.setItem(<span class="string">'token'</span>, token);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h1><p>针对后端返回的数据，做相应调整即可。后端返回数据类似：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"code"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"message"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"errMessage"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"token"</span>: <span class="string">"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTU2NzA3NDQ0NCwiaWF0IjoxNTY3MDQ1NjQ0fQ.Q9LnO-ibBYuBibuo_C7hIIklsK4k1gC-NE6G5yS6AjVJHCZikiSjmCPmcLaBZVUP_TtL5Q2zuw4w69-0IyR7-A"</span>,</span><br><span class="line"><span class="attr">"responseBody"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"account"</span>,</span><br><span class="line"><span class="attr">"status"</span>: <span class="string">"ok"</span>,</span><br><span class="line"><span class="attr">"currentAuthority"</span>: [</span><br><span class="line"><span class="string">"admin"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先定义后端返回的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const responseCode = &#123;</span><br><span class="line">  success: 1,</span><br><span class="line">  notLogin: -90,</span><br><span class="line">  mustUpdateDefaultPassword: -67,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>src\models\login.ts</code> 文件修改两处：</p><ol><li><p>修改登录状态的代码</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yield put(&#123;</span><br><span class="line">        type: &apos;changeLoginStatus&apos;,</span><br><span class="line">        payload: response,</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><p> 改为</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yield put(&#123;</span><br><span class="line">  type: &apos;changeLoginStatus&apos;,</span><br><span class="line">  payload: response.responseBody,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>if (response.status === &#39;ok&#39;) {</code> 改为 <code>if (response.code === responseCode.success) {</code></p></li></ol><p>至此，一个完整的登录过程就介绍完了。后续就可以专注于业务逻辑开发了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方项目里的版本为1.0.0，实际上习惯称这个版本为 v4，相对之前的版本，改动比较大。请参考：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/67498559&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ant Design Pro v4 is Here&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="https://www.lovesofttech.com/categories/react/"/>
    
      <category term="Ant Design Pro" scheme="https://www.lovesofttech.com/categories/react/Ant-Design-Pro/"/>
    
    
      <category term="react" scheme="https://www.lovesofttech.com/tags/react/"/>
    
      <category term="Ant Design Pro" scheme="https://www.lovesofttech.com/tags/Ant-Design-Pro/"/>
    
  </entry>
  
  <entry>
    <title>github 访问加速</title>
    <link href="https://www.lovesofttech.com/general/githubHosts/"/>
    <id>https://www.lovesofttech.com/general/githubHosts/</id>
    <published>2019-08-22T16:00:00.000Z</published>
    <updated>2019-08-23T14:00:13.833Z</updated>
    
    <content type="html"><![CDATA[<ul><li>国内访问 Github 非常慢，clone github 上的项目，有时在10k以下，如果项目代码量比较多，很容易失败，而且重试多次都不行。</li><li>本文介绍通过修改 hosts 文件的方式，绕过国内 DNS 解析，直接访问GitHub的CDN节点，从而达到加速的目的。</li></ul><a id="more"></a><ol><li><p>打开 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">IPAddress.com</a>，查询以下三个域名的DNS解析地址</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">github.com</span><br><span class="line">assets-cdn.github.com</span><br><span class="line">github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p> 也可以直接访问以下三个链接查询：</p><ul><li><a href="https://github.com.ipaddress.com/" target="_blank" rel="noopener">https://github.com.ipaddress.com/</a></li><li><a href="http://assets-cdn.github.com.ipaddress.com/" target="_blank" rel="noopener">http://assets-cdn.github.com.ipaddress.com/</a></li><li><a href="http://github.global.ssl.fastly.net.ipaddress.com/" target="_blank" rel="noopener">http://github.global.ssl.fastly.net.ipaddress.com/</a></li></ul></li><li>记录下查询到的IP地址。</li><li>修改系统hosts文件，路径：<code>C:\Windows\System32\drivers\etc\hosts</code>，添加三行记录并保存。<blockquote><p>注意：需要管理员权限，请以管理员身份打开 cmd.exe 操作。</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.30.253.112 github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line">151.101.185.194 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>由于 hosts 文件为系统文件，默认只读且不让修改，修改它需要技巧，请参考：<a href="/windows/win10Hosts">在 win10 下修改 hosts 文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;国内访问 Github 非常慢，clone github 上的项目，有时在10k以下，如果项目代码量比较多，很容易失败，而且重试多次都不行。&lt;/li&gt;
&lt;li&gt;本文介绍通过修改 hosts 文件的方式，绕过国内 DNS 解析，直接访问GitHub的CDN节点，从而达到加速的目的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="github" scheme="https://www.lovesofttech.com/categories/github/"/>
    
    
      <category term="github" scheme="https://www.lovesofttech.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>前端开发--好记性不如“烂文档”</title>
    <link href="https://www.lovesofttech.com/frontend/experience/"/>
    <id>https://www.lovesofttech.com/frontend/experience/</id>
    <published>2019-08-21T16:00:00.000Z</published>
    <updated>2019-08-22T13:41:34.410Z</updated>
    
    <content type="html"><![CDATA[<p>前端相关知识点，都是在开发的过程中遇到了才记录一下。<br><a id="more"></a></p><h1 id="ant-design-页面，加载时会自动调用-button-的-onclick-事件"><a href="#ant-design-页面，加载时会自动调用-button-的-onclick-事件" class="headerlink" title="ant design 页面，加载时会自动调用 button 的 onclick 事件"></a>ant design 页面，加载时会自动调用 button 的 onclick 事件</h1><p>以下写法，相当于直接调用了 js 方法：this.jsTest()，所以页面加载时会就调用一次。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">onClick</span>=<span class="string">&#123;this.jsTest()&#125;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">16</span>, <span class="attr">marginRight:</span> <span class="attr">16</span> &#125;&#125;</span></span><br><span class="line"><span class="tag">    <span class="attr">htmlType</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></p><p>这是在一个 form 表单里的 button，当输入数据时，也会触发该方法的调用，这可能与 antd 表单某种机制有关，比如对表单数据的有效性进行校验（未验证）。</p><p>改为下面的方式，正常了，也就是不要写括号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">style=&#123;&#123; marginLeft: 16 &#125;&#125;</span><br><span class="line">htmlType=&quot;button&quot;</span><br><span class="line">onClick=&#123;this.jsTest&#125;</span><br><span class="line">&gt;</span><br><span class="line">js test</span><br><span class="line">&lt;/Button&gt;</span><br></pre></td></tr></table></figure></p><p>如果要传参数，需要这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">style=&#123;&#123; marginLeft: 16 &#125;&#125;</span><br><span class="line">htmlType=&quot;button&quot;</span><br><span class="line">//onClick=&#123;this.jsTest&#125;</span><br><span class="line">onClick=&#123;() =&gt; &#123;this.jsTest(false)&#125;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://blog.csdn.net/qq_25252769/article/details/81412224" target="_blank" rel="noopener">https://blog.csdn.net/qq_25252769/article/details/81412224</a></p><h2 id="页面点击事件的正确写法"><a href="#页面点击事件的正确写法" class="headerlink" title="页面点击事件的正确写法"></a>页面点击事件的正确写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Divider</span> <span class="attr">type</span>=<span class="string">"vertical"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"提交学生信息，提交之后基本信息将不可再修改"</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleModify(item)&#125;&gt;</span><br><span class="line">提交</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="ant-design-pro-登录页"><a href="#ant-design-pro-登录页" class="headerlink" title="ant design pro 登录页"></a>ant design pro 登录页</h1><ul><li>现象：配置登录按钮的 <code>htmlType=&quot;submit&quot;</code> 时，ant design 数据有效性校验未通过也刷新页面了。</li><li>解决：将 form 的 onsubmit 去掉，把提交方法放到 button 的 onclick 即可。</li></ul><h1 id="ant-design-表单数据校验"><a href="#ant-design-表单数据校验" class="headerlink" title="ant design 表单数据校验"></a>ant design 表单数据校验</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">isSubmitCheckPass = e =&gt; &#123;</span><br><span class="line">    const &#123; form &#125; = this.props;</span><br><span class="line">    //e.preventDefault();</span><br><span class="line"></span><br><span class="line">    form.validateFieldsAndScroll((err, values) =&gt; &#123;</span><br><span class="line">      if (values.stuName.trim().length === 0) &#123;</span><br><span class="line">        //message.warning(&apos;请输入学生姓名&apos;);</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (values.idNumber.trim().length === 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (values.phone.trim().length === 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if (values.majorCombination.length === 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>以上方法，在调用时，会执行两次，第一次会校验数据，第二次，直接跳过，所以，实际调用的结果其实是直接跳过的最后一次，达不到校验的目的。</p><p>其实 antd 已经帮我们实现了数据校验了，只需要这样即可达到提交之前先校验数据，校验通过之后再提示本次提交的确认信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">handleEnrollConfirm = e =&gt; &#123;</span><br><span class="line">    const &#123; form &#125; = this.props;</span><br><span class="line"></span><br><span class="line">    form.validateFieldsAndScroll((err, values) =&gt; &#123;</span><br><span class="line">      if (!err) &#123;</span><br><span class="line">        Modal.confirm(&#123;</span><br><span class="line">          title: &apos;提交报到&apos;,</span><br><span class="line">          content: &apos;提交之后，学生信息将不能再修改。确认要提交吗？&apos;,</span><br><span class="line">          okText: &apos;确认&apos;,</span><br><span class="line">          cancelText: &apos;取消&apos;,</span><br><span class="line">          onOk: () =&gt; this.handleEnroll(e),</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></p><h1 id="网页表单重置"><a href="#网页表单重置" class="headerlink" title="网页表单重置"></a>网页表单重置</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">"primary"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginTop:</span> <span class="attr">16</span> &#125;&#125;</span></span><br><span class="line"><span class="tag">  <span class="attr">htmlType</span>=<span class="string">"reset"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  重置所有信息</span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击之后没生效，添加处理事件，直接调用 this.props.form.resetFields(),</p><h1 id="修改-state"><a href="#修改-state" class="headerlink" title="修改 state"></a>修改 state</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleRecord = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    registerType: bizTypeEnum.record,</span><br><span class="line">    ...this.state,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样写，没有意义，不会修改 state 的任何值，应该是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">handleRecord = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    ...this.state,</span><br><span class="line">    registerType: bizTypeEnum.record,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="js-正则表达式"><a href="#js-正则表达式" class="headerlink" title="js 正则表达式"></a>js 正则表达式</h1>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 合法uri */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateURL</span>(<span class="params">textval</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> urlregex = <span class="regexp">/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&amp;'\*\+,;=.]+$/</span></span><br><span class="line"> <span class="keyword">return</span> urlregex.test(textval)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 小写字母 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateLowerCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[a-z]+$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 大写字母 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateUpperCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[A-Z]+$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 大小写字母 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAlphabets</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[A-Za-z]+$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 市场售价 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePrice</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/(^[1-9]\d*(\.\d&#123;1,2&#125;)?$)|(^0(\.\d&#123;1,2&#125;)?$)/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 库存预警值 匹配非负整数（正整数 + 0） */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatestockWarn</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^(0|[1-9][0-9]*)$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 比价网站 只验证京东和苏宁网站 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateCompareWebsite</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^((https\:\/\/[0-9a-zA-Z\_]+\.|http\:\/\/[0-9a-zA-Z\_]+\.|https\:\/\/|http\:\/\/)|([0-9a-zA-Z\_]+\.)&#123;0,1&#125;)(jd|suning)\.(com$|com\/[\S]*)/i</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 固定电话 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateTelephone</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125;$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 手机号码 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePhoneNumber</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 手机号码和固定电话 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validatePhTelNumber</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^((0\d&#123;2,3&#125;-\d&#123;7,8&#125;)|(1[3456789]\d&#123;9&#125;))$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 电子邮箱 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateEmail</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 邮编 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateZipCode</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^[1-9][0-9]&#123;5&#125;$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 身份证 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateIDCard</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 银行卡号 15位或者16位或者19位 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateBank</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^([1-9]&#123;1&#125;)(\d&#123;14&#125;|\d&#123;18&#125;|\d&#123;15&#125;)$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 纳税人识别码 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateTaxpayer</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^([1-9]&#123;1&#125;)(\d&#123;14&#125;|\d&#123;18&#125;|\d&#123;15&#125;)$/</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 匹配全空格 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateAllBlank</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> reg = <span class="regexp">/^\s+$/gi</span></span><br><span class="line"> <span class="keyword">return</span> reg.test(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="js-同名函数"><a href="#js-同名函数" class="headerlink" title="js 同名函数"></a>js 同名函数</h1><p>写 Java 久了，会不小心把语法应用到 js，比如在 js 里写了多个同名函数，结果，没有按照参数个数调用“正确”的版本。<br>js 里同名函数，后面的会覆盖掉前面的，所以，只会调用最后面那个，这一点容易忘掉。</p><h1 id="彻底解决-WebStorm-中加载-node-modules-卡死问题"><a href="#彻底解决-WebStorm-中加载-node-modules-卡死问题" class="headerlink" title="彻底解决 WebStorm 中加载 node_modules 卡死问题"></a>彻底解决 WebStorm 中加载 node_modules 卡死问题</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/webStormAddIgnoreFolder.png" alt="彻底解决webstorm中加载node_modules卡死问题" title="">                </div>                <div class="image-caption">彻底解决webstorm中加载node_modules卡死问题</div>            </figure><h1 id="要查看-ajax-错误"><a href="#要查看-ajax-错误" class="headerlink" title="要查看 ajax 错误"></a>要查看 ajax 错误</h1><p>在F12下，选 Console-&gt;All</p><h1 id="jquery-获取表单全部数据"><a href="#jquery-获取表单全部数据" class="headerlink" title="jquery 获取表单全部数据"></a>jquery 获取表单全部数据</h1><p>只设置 id 不行，只设置 name 可以，说明仅依赖 name 属性。多个 form 下可以有同名 name 的 input 存在。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var form = $(&quot;#formIndex&quot; + cDetailID);</span><br><span class="line">var formData = form.serializeArray();</span><br></pre></td></tr></table></figure></p><h1 id="js-有改动，访问过的电脑还是缓存的旧版本，在后面添加一个版本号"><a href="#js-有改动，访问过的电脑还是缓存的旧版本，在后面添加一个版本号" class="headerlink" title="js 有改动，访问过的电脑还是缓存的旧版本，在后面添加一个版本号"></a>js 有改动，访问过的电脑还是缓存的旧版本，在后面添加一个版本号</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;../static/js/apg.common.js&quot; th:src=&quot;@&#123;/js/apg.common.js&#125; + &apos;?v=201802100714&apos;&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="HttpClient-get和post请求的示例代码以及防乱码处理"><a href="#HttpClient-get和post请求的示例代码以及防乱码处理" class="headerlink" title="HttpClient get和post请求的示例代码以及防乱码处理"></a>HttpClient get和post请求的示例代码以及防乱码处理</h1><p><a href="http://blog.csdn.net/qq_20641565/article/details/56509738" target="_blank" rel="noopener">reference</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HttpGet httpget = new HttpGet(uri);</span><br><span class="line">//设置请求的报文头部的编码</span><br><span class="line">httpget.setHeader(new BasicHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded; charset=utf-8&quot;));</span><br><span class="line">//设置期望服务端返回的编码</span><br><span class="line">httpget.setHeader(new BasicHeader(&quot;Accept&quot;, &quot;text/plain;charset=utf-8&quot;));</span><br></pre></td></tr></table></figure></p><h1 id="HTTP请求中的form-data和request-payload的区别"><a href="#HTTP请求中的form-data和request-payload的区别" class="headerlink" title="HTTP请求中的form data和request payload的区别"></a>HTTP请求中的form data和request payload的区别</h1><p>参考：<a href="https://www.cnblogs.com/xuzhudong/p/8487119.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuzhudong/p/8487119.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前端相关知识点，都是在开发的过程中遇到了才记录一下。&lt;br&gt;
    
    </summary>
    
      <category term="frontend" scheme="https://www.lovesofttech.com/categories/frontend/"/>
    
    
      <category term="frontend" scheme="https://www.lovesofttech.com/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装中文字体 Arial</title>
    <link href="https://www.lovesofttech.com/linux/centOS7InstallFont/"/>
    <id>https://www.lovesofttech.com/linux/centOS7InstallFont/</id>
    <published>2019-08-15T16:00:00.000Z</published>
    <updated>2019-08-23T14:00:13.919Z</updated>
    
    <content type="html"><![CDATA[<ul><li>现象：在用 POI 志出 excel 的代码里，用到了 font，设置的字体是 Arial，在 windows 下测试没问题，但发布到 CentOS7，导出时报错。</li><li>解决：在 CentOS 服务器上安装字体即可。</li></ul><a id="more"></a><h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InternalError: java.lang.reflect.InvocationTargetException</span><br><span class="line">        at sun.font.FontManagerFactory$1.run(FontManagerFactory.java:86) ~[?:?]</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method) ~[?:?]</span><br><span class="line">        at sun.font.FontManagerFactory.getInstance(FontManagerFactory.java:74) ~[?:?]</span><br><span class="line">        at java.awt.Font.getFont2D(Font.java:497) ~[?:?]</span><br><span class="line">        at java.awt.Font.canDisplayUpTo(Font.java:2246) ~[?:?]</span><br><span class="line">        at java.awt.font.TextLayout.singleFont(TextLayout.java:469) ~[?:?]</span><br><span class="line">        at java.awt.font.TextLayout.&lt;init&gt;(TextLayout.java:530) ~[?:?]</span><br><span class="line">        at org.apache.poi.ss.util.SheetUtil.getDefaultCharWidth(SheetUtil.java:273) ~[poi-4.1.0.jar:4.1.0]</span><br><span class="line">        at org.apache.poi.ss.util.SheetUtil.getColumnWidth(SheetUtil.java:248) ~[poi-4.1.0.jar:4.1.0]</span><br><span class="line">        at org.apache.poi.ss.util.SheetUtil.getColumnWidth(SheetUtil.java:233) ~[poi-4.1.0.jar:4.1.0]</span><br><span class="line">        at org.apache.poi.hssf.usermodel.HSSFSheet.autoSizeColumn(HSSFSheet.java:2215) ~[poi-4.1.0.jar:4.1.0]</span><br><span class="line">        at org.apache.poi.hssf.usermodel.HSSFSheet.autoSizeColumn(HSSFSheet.java:2197) ~[poi-4.1.0.jar:4.1.0]</span><br><span class="line">        at mis.api.common.excel.ExcelExportUtils.fillSheet(ExcelExportUtils.java:200) ~[mis-api-common-excel-1.0.0.jar:?]</span><br></pre></td></tr></table></figure><p>报错的代码是：<code>sheet.autoSizeColumn(i);</code></p><p>设置字体的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> HSSFCellStyle <span class="title">getStyleHeader</span><span class="params">(HSSFWorkbook wb)</span> </span>&#123;</span><br><span class="line">    HSSFCellStyle style = wb.createCellStyle();</span><br><span class="line">    HSSFFont font = wb.createFont();</span><br><span class="line">    font.setFontName(HSSFFont.FONT_ARIAL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将字体颜色设为白色</span></span><br><span class="line">    font.setColor(IndexedColors.WHITE.index);</span><br><span class="line">    font.setFontHeight((<span class="keyword">short</span>)<span class="number">220</span>);</span><br><span class="line">    font.setBold(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    style.setFont(font);</span><br><span class="line">    style.setAlignment(HorizontalAlignment.CENTER);</span><br><span class="line">    style.setVerticalAlignment(VerticalAlignment.CENTER);</span><br><span class="line">    <span class="comment">//style.setWrapText(true);//设置自动换行</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 背景色</span></span><br><span class="line">    style.setFillPattern(FillPatternType.SOLID_FOREGROUND);</span><br><span class="line">    style.setFillForegroundColor(IndexedColors.GREY_80_PERCENT.index);</span><br><span class="line">    <span class="comment">//style.setFillBackgroundColor(IndexedColors.YELLOW.index);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置边框</span></span><br><span class="line">    setStyleBorder(style);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> style;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ul><li><p>需要先安装 fontconfig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fontconfig</span><br></pre></td></tr></table></figure></li><li><p>接着操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/share/fonts/arial</span><br><span class="line">cd /usr/share/fonts/arial </span><br><span class="line"># 上传字体文件，字体文件在 C:\Windows\Fonts\Arial 目录下，将所有文件上传至 /usr/share/fonts/arial</span><br><span class="line">chmod -R 755 /usr/share/fonts/arial # 能省吗？配置新服务器时留意。</span><br></pre></td></tr></table></figure></li><li><p>为刚加入的字体设置缓存使之有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/share/font/arial</span><br><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure></li><li><p>重启 tomcat，再导出，就 ok 了。</p><blockquote><p>不重启，不知道是否也可以。配置新服务器时留意。</p></blockquote></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>曾尝试在一台不能上外网的服务器上离线安装相关依赖，但最终失败。</p><p>把相关依赖都下载了之后，最终的安装顺序如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh fontpackages-filesystem-1.44-8.el7.noarch.rpm</span><br><span class="line">rpm -ivh dejavu-fonts-common-2.33-6.el7.noarch.rpm</span><br><span class="line">rpm -ivh dejavu-sans-fonts-2.33-6.el7.noarch.rpm</span><br><span class="line">rpm -ivh fontconfig-2.13.0-4.3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure></p><p>在执行 mkfontscale 命令时，提示无此命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkfontscale</span><br><span class="line">mkfontscale: error while loading shared libraries: libfontenc.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">[root@localhost ~]#</span><br></pre></td></tr></table></figure></p><p>用以下命令查找，发现找不到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mkfontscale</span><br></pre></td></tr></table></figure></p><p>于是在 yum 安装成功的电脑上把文件 copy 到相应位置，执行时，又报依赖问题，所以，离线安装失败。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkfontscale</span><br><span class="line">mkfontscale: error while loading shared libraries: libfontenc.so.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure></p><h2 id="离线安装包下载"><a href="#离线安装包下载" class="headerlink" title="离线安装包下载"></a>离线安装包下载</h2><p><a href="http://rpmfind.net/" target="_blank" rel="noopener">rpm 包下载网站 -&gt; rpmfind</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;现象：在用 POI 志出 excel 的代码里，用到了 font，设置的字体是 Arial，在 windows 下测试没问题，但发布到 CentOS7，导出时报错。&lt;/li&gt;
&lt;li&gt;解决：在 CentOS 服务器上安装字体即可。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/categories/CentOS/"/>
    
      <category term="font" scheme="https://www.lovesofttech.com/categories/CentOS/font/"/>
    
    
      <category term="CentOS" scheme="https://www.lovesofttech.com/tags/CentOS/"/>
    
      <category term="font" scheme="https://www.lovesofttech.com/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>批量修改文件名，删除文件名中包含的特殊字符</title>
    <link href="https://www.lovesofttech.com/windows/batchRenameFile/"/>
    <id>https://www.lovesofttech.com/windows/batchRenameFile/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-07-13T08:40:36.052Z</updated>
    
    <content type="html"><![CDATA[<p>一个场景就是，从网上下载到的某些资源，上传者加了广告内容，如果你不想要这部分广告内容，除了可以用工具批量修改之外，还可以用批处理文件来删除，方便快捷绿色省心~~</p><a id="more"></a><h1 id="文件名后面添加广告"><a href="#文件名后面添加广告" class="headerlink" title="文件名后面添加广告"></a>文件名后面添加广告</h1><h2 id="不带空格的文件名"><a href="#不带空格的文件名" class="headerlink" title="不带空格的文件名"></a>不带空格的文件名</h2><p>如：<code>test-[加微信xxxx获取更多课程].txt</code><br>这类文件，批处理脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:: 仅处理当前目录以及当前目录下的所有文件，所以，需要把该文件 copy 至需要改名的文件夹下，双击执行</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set adv=-[加微信xxxx获取更多课程]</span><br><span class="line"></span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b *%adv%*&apos;) do (</span><br><span class="line">    ::echo %%i</span><br><span class="line">    set var=%%i</span><br><span class="line">    set var=!var:%adv%=!</span><br><span class="line">    echo rename &quot;%%i&quot; to &quot;!var!&quot;</span><br><span class="line">    ren &quot;%%i&quot; &quot;!var!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><blockquote><p><em>试图同时处理子目录，所以有参数 /s，但是这样一来，提示：<code>The syntax of the command is incorrect.</code></em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set adv=-[加微信xxxx获取更多课程]</span><br><span class="line"></span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /s/b *%adv%*&apos;) do (</span><br><span class="line">    ::echo %%i</span><br><span class="line">    set var=%%i</span><br><span class="line">    set var=!var:%adv%=!</span><br><span class="line">    echo !var!</span><br><span class="line">    ren &quot;%%i&quot; &quot;!var!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p></blockquote><p><em>暂未解决，先一个目录一个目录的操作吧，笨点儿就笨儿，毕竟需要修改的目录应该不会很多~~</em></p><h2 id="带空格的文件名"><a href="#带空格的文件名" class="headerlink" title="带空格的文件名"></a>带空格的文件名</h2><p>但是，如果需要删除的广告部分有空格，如：<code>1. test - [加微信 xxxx 获取更多课程].txt</code>，批处理脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b *-[加微信 xxxx 获取更多课程]*&apos;) do (</span><br><span class="line">    echo %%i</span><br><span class="line">    set var=%%i</span><br><span class="line">    set var=!var:-[加微信 xxxx 获取更多课程]=!</span><br><span class="line">    echo %%i !var!</span><br><span class="line">    ren &quot;%%i&quot; &quot;!var!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><p>执行的时候会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File Not Found</span><br><span class="line">Press any key to continue . . .</span><br></pre></td></tr></table></figure></p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在删除广告文字前，先将空格删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:: 仅处理当前目录以及当前目录下的所有文件，所以，需要把该文件 copy 至需要改名的文件夹下，双击执行</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">:: 先删除空格</span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b *.*&apos;) do (</span><br><span class="line">    set &quot;foo=%%~nxi&quot;</span><br><span class="line">    set foo=!foo: =!</span><br><span class="line">    ren &quot;%%~fi&quot; &quot;!foo!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 删除需要删除的广告字符，记得替换成你自己需要删除的</span><br><span class="line">set adv=-[加微信xxxx获取更多课程]</span><br><span class="line"></span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /b *%adv%*&apos;) do (</span><br><span class="line">    ::echo %%i</span><br><span class="line">    set var=%%i</span><br><span class="line">    set var=!var:%adv%=!</span><br><span class="line">    echo rename &quot;%%i&quot; to &quot;!var!&quot;</span><br><span class="line">    ren &quot;%%i&quot; &quot;!var!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><h1 id="批量删除文件名中的空格"><a href="#批量删除文件名中的空格" class="headerlink" title="批量删除文件名中的空格"></a>批量删除文件名中的空格</h1><ul><li>会处理当前目录以及所有子目录和子目录下的所有文件，如子目录也带空格，则需要多执行几次，因为子目录会先被修改。</li><li>正确的姿势是，在循环里判断是否为文件夹，如果是，则先处理文件夹下的文件，最后处理文件夹名，这一点请读者自行研究。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off&amp;setlocal enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">for /f &quot;delims=&quot; %%i in (&apos;dir /s/b *.*&apos;) do (</span><br><span class="line">    set &quot;foo=%%~nxi&quot;</span><br><span class="line">    set foo=!foo: =!</span><br><span class="line">    ren &quot;%%~fi&quot; &quot;!foo!&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li></ul><h1 id="百度-PC-端下载文件完成后，文件名后缀没有被及时修改，其实是下载完成了的"><a href="#百度-PC-端下载文件完成后，文件名后缀没有被及时修改，其实是下载完成了的" class="headerlink" title="百度 PC 端下载文件完成后，文件名后缀没有被及时修改，其实是下载完成了的"></a>百度 PC 端下载文件完成后，文件名后缀没有被及时修改，其实是下载完成了的</h1><p>但并不总是这样，后来的版本没有这个问题，估计官方修复这个 bug 了。批量修改脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">FOR /F &quot;delims=&quot; %%I IN (&apos;DIR /A-D /B *.baiduyun.p.downloading&apos;) DO REN &quot;%%~I&quot; &quot;%%~nI&quot;</span><br><span class="line">FOR /F &quot;delims=&quot; %%I IN (&apos;DIR /A-D /B *.baiduyun.p&apos;) DO REN &quot;%%~I&quot; &quot;%%~nI&quot;</span><br><span class="line">FOR /F &quot;delims=&quot; %%I IN (&apos;DIR /A-D /B *.baiduyun&apos;) DO REN &quot;%%~I&quot; &quot;%%~nI&quot;</span><br></pre></td></tr></table></figure></p><h1 id="bat批处理的注释语句"><a href="#bat批处理的注释语句" class="headerlink" title="bat批处理的注释语句"></a>bat批处理的注释语句</h1><ol><li><code>::</code> 注释内容（第一个冒号后也可以跟任何一个非字母数字的字符）</li><li><code>rem</code> 注释内容（不能出现重定向符号和管道符号）</li><li><code>echo</code> 注释内容（不能出现重定向符号和管道符号）〉nul</li><li><code>if not exist nul</code> 注释内容（不能出现重定向符号和管道符号）</li><li><code>:</code>注释内容（注释文本不能与已有标签重名）<br>1.<code>%</code>注释内容%（可以用作行间注释，不能出现重定向符号和管道符号）</li><li><code>goto</code> 标签 注释内容（可以用作说明goto的条件和执行内容）</li><li><code>:</code>标签 注释内容（可以用作标签下方段的执行内容）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个场景就是，从网上下载到的某些资源，上传者加了广告内容，如果你不想要这部分广告内容，除了可以用工具批量修改之外，还可以用批处理文件来删除，方便快捷绿色省心~~&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="https://www.lovesofttech.com/categories/windows/"/>
    
      <category term="experience" scheme="https://www.lovesofttech.com/categories/windows/experience/"/>
    
    
      <category term="experience" scheme="https://www.lovesofttech.com/tags/experience/"/>
    
      <category term="windows" scheme="https://www.lovesofttech.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>java 开发中的一些小经验</title>
    <link href="https://www.lovesofttech.com/java/experience/"/>
    <id>https://www.lovesofttech.com/java/experience/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-08-23T14:00:13.885Z</updated>
    
    <content type="html"><![CDATA[<p>java 开发中的小经验，零散的知识点。<br><a id="more"></a></p><h1 id="IDEA-提示-Unchecked-call-to-‘XXXX’-as-a-member-of-raw-type-‘XXXX’-more…-Ctrl-F1"><a href="#IDEA-提示-Unchecked-call-to-‘XXXX’-as-a-member-of-raw-type-‘XXXX’-more…-Ctrl-F1" class="headerlink" title="IDEA 提示: Unchecked call to ‘XXXX’ as a member of raw type ‘XXXX’ more… (Ctrl+F1)"></a>IDEA 提示: Unchecked call to ‘XXXX’ as a member of raw type ‘XXXX’ more… (Ctrl+F1)</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unchecked call to &apos;ApiResponse(T)&apos; as a member of raw type &apos;mis.api.common.model.response.ApiResponse&apos;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/idea/uncheckedOrigin.png" alt="警告信息" title="">                </div>                <div class="image-caption">警告信息</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/idea/unchecked.png" alt="警告的全部信息" title="">                </div>                <div class="image-caption">警告的全部信息</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/idea/uncheckedSolution.png" alt="加上类型好可，尖括号里添加上泛型对应的类名" title="">                </div>                <div class="image-caption">加上类型好可，尖括号里添加上泛型对应的类名</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/idea/uncheckedSolutionResult.png" alt="不过，尖括号里的类名可以省略" title="">                </div>                <div class="image-caption">不过，尖括号里的类名可以省略</div>            </figure><h2 id="复制警告信息"><a href="#复制警告信息" class="headerlink" title="复制警告信息"></a>复制警告信息</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/idea/ideaCopyWarning.png" alt="复制警告信息" title="">                </div>                <div class="image-caption">复制警告信息</div>            </figure><h1 id="SpringBoot-查询时间数据，数据库和返回数据比实际存储的相差8小时"><a href="#SpringBoot-查询时间数据，数据库和返回数据比实际存储的相差8小时" class="headerlink" title="SpringBoot 查询时间数据，数据库和返回数据比实际存储的相差8小时"></a>SpringBoot 查询时间数据，数据库和返回数据比实际存储的相差8小时</h1><p>我遇到的情况：通过 spring security 查询用户时间数据（MySQL 数据库，字段类型为：datetime），返回的数据比实际存储在数据里的多8小时。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserDetailsService.loadUserByUsername(username);</span><br></pre></td></tr></table></figure></p><p>serverTimezone=GMT，改为：<code>serverTimezone=GMT%2b8</code>，其中 <code>%2b</code> 为 + 号</p><p>如果还没加参数 serverTimezone，则添加上。</p><h1 id="spring-boot-项目，-RestController-返回系统时间，比实际时间多8小时"><a href="#spring-boot-项目，-RestController-返回系统时间，比实际时间多8小时" class="headerlink" title="spring boot 项目，@RestController 返回系统时间，比实际时间多8小时"></a>spring boot 项目，@RestController 返回系统时间，比实际时间多8小时</h1><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;timestamp&quot;: &quot;2019-06-23T14:48:55.093+0000&quot;, # 这里比实际的系统时间少了8小时</span><br><span class="line">    &quot;status&quot;: 500,</span><br><span class="line">    &quot;error&quot;: &quot;Internal Server Error&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;账号不存在&quot;,</span><br><span class="line">    // some other code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原因：spring 转 json 的默认实现 jackson 中会根据时区去转换时间，而 jackson 的默认时区跟国内是相差8小时的。</p><ul><li>相差8小时实测：<ul><li>比数据库多8小时</li><li>比通过 spring boot 取到的系统时间时间少8小时</li></ul></li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>设置时区<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#application.properties文件配置</span><br><span class="line">spring.jackson.time-zone=GMT+8</span><br><span class="line"> </span><br><span class="line">#application.yml文件配置</span><br><span class="line">spring:</span><br><span class="line">    jackson:</span><br><span class="line">        time-zone: GMT+8</span><br></pre></td></tr></table></figure></p><h1 id="maven-跳过单元测试"><a href="#maven-跳过单元测试" class="headerlink" title="maven 跳过单元测试"></a>maven 跳过单元测试</h1><p>在使用 <code>mvn package</code> 进行编译、打包时，Maven会执行 <code>src/test/java</code> 中的 JUnit 测试用例，有时为了跳过测试，会使用参数 <code>-DskipTests</code> 和 <code>-Dmaven.test.skip=true</code>，这两个参数的主要区别是：</p><ol><li><code>-DskipTests</code>，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</li><li><code>-Dmaven.test.skip=true</code>，不执行测试用例，也不编译测试用例类。</li></ol><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>同理，打包时也可以跳过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true -f directory\pom.xml</span><br></pre></td></tr></table></figure></p><h1 id="Maven-引入本地-jar-包依赖"><a href="#Maven-引入本地-jar-包依赖" class="headerlink" title="Maven 引入本地 jar 包依赖"></a>Maven 引入本地 jar 包依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun.mns&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-sdk-mns&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.8&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;project.basedir&#125;/src/main/resources/lib/aliyun-sdk-mns-1.1.8.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="api-不支持-301-跳转"><a href="#api-不支持-301-跳转" class="headerlink" title="api 不支持 301 跳转"></a>api 不支持 301 跳转</h1><p>设置了 301 或 302 跳转的域名，不支持 api 调用。</p><h1 id="spring-boot-PathVariable-传递带小数点的参数"><a href="#spring-boot-PathVariable-传递带小数点的参数" class="headerlink" title="spring boot @PathVariable 传递带小数点的参数"></a>spring boot @PathVariable 传递带小数点的参数</h1><p>spring boot 项目，RequestMapping 路由中，在最后一个斜杠后的部分，小数点后面的部分会被忽略掉。<br>这种处理方式带来的好处：可以做伪静态，将网站的链接都写成 .html，但是实际上，我们的路由可以没有 .html 后缀，这样爬虫在爬网站的时候会当成静态？（没研究是不是这样）<br>带来的坏处：在通过 uri 传递参数的时候，如果有小数点，其后面的部分会被丢掉，导致程序获取到的参数不正确。不过，这种需求是可以解决的。</p><h2 id="解决通过-uri-传递参数不受以上规则影响"><a href="#解决通过-uri-传递参数不受以上规则影响" class="headerlink" title="解决通过 uri 传递参数不受以上规则影响"></a>解决通过 uri 传递参数不受以上规则影响</h2><p>其实很简单，就是在路由配置上，在最后加上一个反斜杠就行了，这样，如果输入 url 访问的时候，没有反斜杠，会被当成不存在，这样一来，url 中的参数信息不会被截取。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"variable/&#123;username&#125;/&#123;password&#125;/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String username, @PathVariable String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"username:"</span> + username + <span class="string">"&lt;br&gt;"</span> + <span class="string">"password:"</span> + password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:83/variable/andy/fkd.242j8.fdsja&amp;*f7/</span><br></pre></td></tr></table></figure></p><p>将会在页面上输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userName:andy</span><br><span class="line">passWord:fkd.242j8.fdsja&amp;*f7</span><br></pre></td></tr></table></figure></p><p>如果访问<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:83/variable/andy/fkd.242j8.fdsja&amp;*f7</span><br></pre></td></tr></table></figure></p><p>将会得到错误提示，如果网站配置了 404 页面，则会跳转至 404 页面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Whitelabel Error Page</span><br><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line"></span><br><span class="line">Tue Aug 07 08:40:16 CST 2018</span><br><span class="line">There was an unexpected error (type=Not Found, status=404).</span><br><span class="line">No message available</span><br></pre></td></tr></table></figure></p><h1 id="Application-failed-to-start-with-classpath"><a href="#Application-failed-to-start-with-classpath" class="headerlink" title="Application failed to start with classpath"></a>Application failed to start with classpath</h1><p>这个错误，通常是因为 application.yml 配置有误导致，用排除法解决，就是删除某一顶配置，再启动，如果问题依旧，再删除一项，直到可以正常启动，那么，能正常启动之前删除的配置项，一定是有问题的，修改好了，再恢复之前的配置，如此反复测试，就能找到所有配置有误的地方。</p><p>通常，在接手一个旧项目，将期改造，或者用一个开源项目的时候会遇到这种问题。</p><h1 id="依赖不能正常下载"><a href="#依赖不能正常下载" class="headerlink" title="依赖不能正常下载"></a>依赖不能正常下载</h1><p>到项目根目录，执行 <code>mvn compile</code>，看报错信息就能知道原因了。<br>比如我遇到的一次，是 pom.xml 文件在删除 parent 节点的时候，将内部节点 groupId 和 version 一并删除了，就遇到了这个问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[ERROR] [ERROR] Some problems were encountered while processing the POMs:</span><br><span class="line">[FATAL] &apos;groupId&apos; is missing. @ line 4, column 109</span><br><span class="line">[FATAL] &apos;version&apos; is missing. @ line 4, column 109</span><br><span class="line"> @</span><br><span class="line">[ERROR] The build could not read 1 project -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR]   The project [unknown-group-id]:apg.common.es:[unknown-version] (C:\workspace\source\apg.common\apg.common.es\pom.xml) has 2 errors</span><br><span class="line">[ERROR]     &apos;groupId&apos; is missing. @ line 4, column 109</span><br><span class="line">[ERROR]     &apos;version&apos; is missing. @ line 4, column 109</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException</span><br></pre></td></tr></table></figure></p><h1 id="An-enum-switch-case-label-must-be-the-unqualified-name-of-an-enumeration-constant"><a href="#An-enum-switch-case-label-must-be-the-unqualified-name-of-an-enumeration-constant" class="headerlink" title="An enum switch case label must be the unqualified name of an enumeration constant"></a>An enum switch case label must be the unqualified name of an enumeration constant</h1><p>解决：switch case语句case后的枚举常量不带枚举类型</p><h1 id="Generating-equals-hashCode-…"><a href="#Generating-equals-hashCode-…" class="headerlink" title="Generating equals/hashCode …"></a>Generating equals/hashCode …</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning:(5, 1) java: Generating equals/hashCode implementation but without a call to superclass, even though this class does not extend java.lang.Object. If this is intentional, add &apos;@EqualsAndHashCode(callSuper=false)&apos; to your type.</span><br></pre></td></tr></table></figure><p>大致意思是默认子类的equals和hashCode方法，不会包含或者考虑基类的属性。</p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>加上注解@EqualsAndHashCode(callSuper=true) ，警告消失。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/feinifi/article/details/85275280" target="_blank" rel="noopener">lombok注解@Data使用在继承类上时出现警告</a></p><h1 id="Information-java-有关详细信息-请使用-Xlint-unchecked-重新编译。"><a href="#Information-java-有关详细信息-请使用-Xlint-unchecked-重新编译。" class="headerlink" title="Information:java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。"></a>Information:java: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。</h1><p>在方法前加注解<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br></pre></td></tr></table></figure></p><h1 id="spring-boot-项目打包成-war-包发布到-tomcat-窗口，启动时，项目未被加载"><a href="#spring-boot-项目打包成-war-包发布到-tomcat-窗口，启动时，项目未被加载" class="headerlink" title="spring boot 项目打包成 war 包发布到 tomcat 窗口，启动时，项目未被加载"></a>spring boot 项目打包成 war 包发布到 tomcat 窗口，启动时，项目未被加载</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8089"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在 &lt;/Host&gt; 前面加上下面一行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">docBase</span>=<span class="string">"/home/utomcat/apps/mis-backend"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">reloadable</span>=<span class="string">"false"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>单加上上面的，启动时，spring boot 并未被加载，因为我只是改了 pom.xml，加了 <code>&lt;packaging&gt;war&lt;/packaging&gt;</code>，<br>还需要修改启动类。还需要 extends SpringBootServletInitializer</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file" target="_blank" rel="noopener">参考 -&gt; spring boot build as war</a></p><h1 id="jackson-注解"><a href="#jackson-注解" class="headerlink" title="jackson 注解"></a>jackson 注解</h1><p>我们在进行数据返回的时候肯定是有些属性不希望前端可以获取到，或者是某些数据为空的时候前端要求不必进行回传，那么这时候我们就可以进行属性的隐藏。</p><ul><li>@JsonIgnore：使用在某个属性上，这样在序列化和反序列化的时候都会忽略这个属性，最直接的效果就是返回的JSON属性是没有这个属性的，一般作用于密码这系列的属性。</li><li>@JsonInclude：使用在某个属性上，配合它的属性Value=JsonInclude.Include.NON_NULL，表示的是如果这个属性的属性值为空那么在返回前端的时候不可见。</li><li>@JsonProperty：使用在某个属性上，这个注解有两个作用，第一是修改返回JSON数据的时候key值为value指定值，第二个作用是配合属性access=JsonProperty.Access.WRITE_ONLY表示属性只可以进行序列化而不能进行反序列化，直观效果就是返回的数据没有该属性。</li><li>@JsonIgnoreProperties：作用在类声明处，它和@JsonIgnore注解的区别就是可以对多个属性作用，直接在value属性后面使用大括号逗号隔开即可，它的ignoreUnknow属性为true表示忽略未定义的属性。</li></ul><p>日期：<br>我们直接使用日期出来的格式必然不是我们想要的，那么我们可以使用注解：@JsonFormat配合上属性pattern标志事件格式，timezone是时区，local是区域。在这里必须强调的是这是把日期格式化为String，一般应用在后台向前端传递数据，如果是前端的String格式需要解析为日期格式我们可以使用@DateTimeFormat即可。<br><code>@JsonFormat(timezone=&quot;GMT+8&quot;, pattern=&quot;yyy-MM-dd HH:mm:ss&quot;)</code></p><p>排序：<br>有时候为了规范好看我们也需要让属性按照一定顺序进行排列，这时候我们就使用@JsonPropertyOrder这个注解，它的属性alphabetic默认值是false，我们设置为true即可。</p><p>以下二者同时用，JsonIgnore 没有生效，返回的 JSON 还是会包含属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JsonIgnore</span><br><span class="line">@JsonProperty(&quot;毕业院校&quot;)</span><br></pre></td></tr></table></figure></p><p>换成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@JsonProperty(value=&quot;毕业院校&quot;, access=JsonProperty.Access.WRITE_ONLY)</span><br></pre></td></tr></table></figure></p><p>同样，JsonIgnoreProperties 与 JsonProperty 同时使用时，前者不会生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@JsonIgnoreProperties(value = &#123;&quot;nameSpellAcronym&quot;, &quot;sexTxt&quot;&#125;)</span><br><span class="line">...</span><br><span class="line">    @JsonProperty(value=&quot;性别&quot;)</span><br><span class="line">    private String sexTxt;</span><br></pre></td></tr></table></figure></p><p>关于后端对实体类数据进行格式化输出的方法及使用@JsonSerialize和@JsonFormat<br><a href="https://www.cnblogs.com/mollie-x/p/10514356.html" target="_blank" rel="noopener">https://www.cnblogs.com/mollie-x/p/10514356.html</a></p><p>关于JSON反序列化与序列化名称问题的一点小经验<br><a href="https://www.cnblogs.com/yrml/p/9122955.html" target="_blank" rel="noopener">https://www.cnblogs.com/yrml/p/9122955.html</a></p><ul><li>@JsonProperty 这个注解提供了序列化和反序列化过程中该java属性所对应的名称</li><li>@JsonAlias 这个注解只只在反序列化时起作用，指定该java属性可以接受的更多名称</li></ul><h1 id="Cannot-call-sendError-after-the-response-has-been-committed"><a href="#Cannot-call-sendError-after-the-response-has-been-committed" class="headerlink" title="Cannot call sendError() after the response has been committed"></a>Cannot call sendError() after the response has been committed</h1><p>导出 excel 时报错：<br> // 因为在前端请求时，还会有返回，所以，这里如果 close，会导致再次返回时报错：java.lang.IllegalStateException: Cannot call sendError() after the response has been committed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">22:23:50,843 &lt;org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver&gt;  WARN [http-nio-89-exec-4]: Failure while trying to resolve exception [org.springframework.web.HttpMediaTypeNotAcceptableException]</span><br><span class="line">java.lang.IllegalStateException: Cannot call sendError() after the response has been committed</span><br><span class="line">at org.apache.catalina.connector.ResponseFacade.sendError(ResponseFacade.java:472) ~[tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:129) ~[tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:129) ~[tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.springframework.security.web.util.OnCommittedResponseWrapper.sendError(OnCommittedResponseWrapper.java:109) ~[spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServletResponseWrapper.sendError(HttpServletResponseWrapper.java:129) ~[tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at com.alibaba.druid.support.http.WebStatFilter$StatHttpServletResponseWrapper.sendError(WebStatFilter.java:343) ~[druid-1.1.16.jar:1.1.16]</span><br><span class="line">at org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.handleHttpMediaTypeNotAcceptable(DefaultHandlerExceptionResolver.java:304) ~[spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver.doResolveException(DefaultHandlerExceptionResolver.java:181) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:140) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:79) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1298) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1110) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1056) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) [spring-webmvc-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) [tomcat-embed-websocket-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:103) [spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124) [druid-1.1.16.jar:1.1.16]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) [tomcat-embed-core-9.0.21.jar:9.0.21]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334) [spring-security-web-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at mis.api.common.jwt.JwtAuthorizationTokenFilter.doFilterInternal(JwtAuthorizationTokenFilter.java:63) [classes/:?]</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:109) [spring-web-5.1.8.RELEASE.jar:5.1.8.RELEASE]</span><br></pre></td></tr></table></figure></p><p>从提示错误的字面意思判断“Cannotcall sendError() after the response has been committed”，“当response被提交后不能调用sendError()”。</p><p>出现这个错误，应该是多次response导致的，可以这么理解，http server发送response后就关闭了socket，这个时候再次发送response给http client就会出现这个问题。<br>因为 excel 导出，在 return 之前已经 response 处理过流了</p><h1 id="invalid-source-release-11"><a href="#invalid-source-release-11" class="headerlink" title="invalid source release: 11"></a>invalid source release: 11</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Information:java: Errors occurred while compiling module &apos;mis-config-common&apos;</span><br><span class="line">Information:javac 1.8.0_161 was used to compile java sources</span><br><span class="line">Information:7/25/2019 3:32 PM - Compilation completed with 1 error and 0 warnings in 6 s 247 ms</span><br><span class="line">Error:java: invalid source release: 11</span><br></pre></td></tr></table></figure><ul><li>IDEA 的配置路径：Project Structure -&gt; Project -&gt; Project SDK 和 Project language level，把这两项都设置为11就对了。</li><li>我重新 import 了项目，而 idea 的这两项配置，默认为1.8，而我在每个项目的 pom.xml 配置指定成11了，所以会报这个错。</li></ul><h1 id="‘packaging’-with-value-‘jar’-is-invalid-Aggregator-projects-require-‘pom’-as-packaging"><a href="#‘packaging’-with-value-‘jar’-is-invalid-Aggregator-projects-require-‘pom’-as-packaging" class="headerlink" title="‘packaging’ with value ‘jar’ is invalid. Aggregator projects require ‘pom’ as packaging."></a>‘packaging’ with value ‘jar’ is invalid. Aggregator projects require ‘pom’ as packaging.</h1><p>项目是多模块方式，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.csist&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mis-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;packaging&gt;pom&lt;/packaging&gt;</span><br><span class="line">    &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;mis-config-common&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure></p><p>之前没有 <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code> 这一项，加上就好了。没有的话，默认是 jar。</p><h1 id="mvn-compile-时遇到该错误：编码-GBK-的不可映射字符-0xBB"><a href="#mvn-compile-时遇到该错误：编码-GBK-的不可映射字符-0xBB" class="headerlink" title="mvn compile 时遇到该错误：编码 GBK 的不可映射字符 (0xBB)"></a>mvn compile 时遇到该错误：编码 GBK 的不可映射字符 (0xBB)</h1><p>解决这个问题的思路： 在maven的编译插件中声明正确的字符集编码编码——编译使用的字符集编码与代码文件使用的字符集编码一致！！<br>这个是由于代码使用的UTF-8，而maven编译的时候使用的GBK的缘故。 可以通过修改项目的pom文件，可以告诉maven这个项目使用UTF-8编码来编译。在项目的pom.xml文件中，<code>&lt;properties&gt;</code> 节点添加下面的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br></pre></td></tr></table></figure></p><h1 id="mvn-compile-时报错：编码-UTF-8-的不可映射字符-0xB6"><a href="#mvn-compile-时报错：编码-UTF-8-的不可映射字符-0xB6" class="headerlink" title="mvn compile 时报错：编码 UTF-8 的不可映射字符 (0xB6)"></a>mvn compile 时报错：编码 UTF-8 的不可映射字符 (0xB6)</h1><p>原因是，支持的 jdk 版本只到 1.8，而 windows 环境变量中设置的版本为 11，切换到 1.8 就好了。修改环境变量之后，记得要把 idea 全部项目关闭，再重新打开新的环境变量才会生效。 </p><p>或者，在 pom.xml 中指定编译版本也可以。推荐这种方式。</p><h1 id="程序包com-sun-xml-internal-messaging-saaj-util不存在"><a href="#程序包com-sun-xml-internal-messaging-saaj-util不存在" class="headerlink" title="程序包com.sun.xml.internal.messaging.saaj.util不存在"></a>程序包com.sun.xml.internal.messaging.saaj.util不存在</h1><p>一个老项目，用到 <code>com.sun.xml.internal.messaging.saaj.util</code>。</p><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt;</span><br><span class="line">                    &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt;</span><br><span class="line">                    &lt;compilerArguments&gt;</span><br><span class="line">                        &lt;bootclasspath&gt;$&#123;java.home&#125;/jre/lib/rt.jar&lt;/bootclasspath&gt;</span><br><span class="line">                    &lt;/compilerArguments&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure><p>其中，java.version 需要定义，java.home 不用。另外，IDEA 需要配置一个相应版本（这里是 1.8）的目录才行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></p><h1 id="spring-boot-不需要连接数据库配置"><a href="#spring-boot-不需要连接数据库配置" class="headerlink" title="spring boot 不需要连接数据库配置"></a>spring boot 不需要连接数据库配置</h1><p>spring boot 项目，默认需要注册数据库驱动，但是如果项目不需要数据库支持，在不配置数据库连接信息的情况下，就会报这个错。</p><p>解决办法，在@SpringBootApplication注解后面排除数据库自动配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>(exclude=&#123;DataSourceAutoConfiguration.class,HibernateJpaAutoConfiguration.class&#125;)</span><br></pre></td></tr></table></figure></p><p>如果不加括号里的配置，会报错：<br><code>Cannot determine embedded database driver class for database type NONE</code></p><h1 id="Caused-by-java-lang-NoClassDefFoundError-javax-servlet-ServletContext"><a href="#Caused-by-java-lang-NoClassDefFoundError-javax-servlet-ServletContext" class="headerlink" title="Caused by: java.lang.NoClassDefFoundError: javax/servlet/ServletContext"></a>Caused by: java.lang.NoClassDefFoundError: javax/servlet/ServletContext</h1><p>上面的错误，是因为我设置了spring-boot编译类型为war，同时设置了tomcat项之后用 IDEA 直接启动 spring-boot，导致内置的tomcat不可用导致的。<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其实，把这一项删掉，既不影响在 IDEA 及 Eclipse里调试和运行，也不影响发布到tomcat 容器中运行。</p><h1 id="查看thymeleaf默认配置项"><a href="#查看thymeleaf默认配置项" class="headerlink" title="查看thymeleaf默认配置项"></a>查看thymeleaf默认配置项</h1><p>在项目中添加下面的引用，按住Ctrl加鼠标查看代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties;</span><br></pre></td></tr></table></figure></p><h1 id="关于-POJO-属性的访问范围修饰符"><a href="#关于-POJO-属性的访问范围修饰符" class="headerlink" title="关于 POJO 属性的访问范围修饰符"></a>关于 POJO 属性的访问范围修饰符</h1><p>一开始有部分 POJO 的属性直接用了 public，这样的好处是赋值与取值的代码相对简单。如果需要通过程序赋值，比如通过 MyBatis 查询数据，输出为某 POJO 类型的列表，或者在调用 api 时传入的 JSON 格式。<br>为了达到程序自动赋值，必须有 setter。这没有问题，只让 IDE 生成 setter 代码就好了，这样还是能让取值代码简洁而“优雅”。这种思想可在 C# 有很好的体现，C# 的 setter 与 getter 就感觉是真的很优雅，C# 不需要定义属性变量，直接定义 getter 与 setter 并且是一个名称，就象在 java 的 POJO 是定义了一个 public 的属性一样。看起来就象是这样：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RateErrView &#123;</span><br><span class="line">    public TopResponse Response &#123; get; set; &#125;</span><br><span class="line">    public long BizID &#123; get; set; &#125;</span><br><span class="line">    public string SessionKey &#123; get; set; &#125;</span><br><span class="line">    public string TID &#123; get; set; &#125;</span><br><span class="line">    public string OID &#123; get; set; &#125;</span><br><span class="line">    public string From &#123;get;set;&#125;</span><br><span class="line">    public string Para &#123;get;set;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是，问题来了，并不是所有团队成员都明白这个原理，经常出现有因队成员忘记加 setter 的，直到发现数据没有被正确赋值才知道，甚至是，之前添加的属性没问题，只是新加的属性没有被正确赋值，这往往发生在经验尚不足的新同事身上。<br>再后来，发现有些地方的代码还依赖于 getter，如果能明确哪些 POJO 需要，哪些不需要，也好说，把需要的加上就行了，但是，这个判断并不是每个团队成员都清楚，而且好多这种依赖是随着系统的演进而发生的。</p><p>所以，为了避免以上问题，最好的办法就是，不要用 public 的属性，所有属性都是 private 的，而且必须添加  setter 与 getter 代码，让这个规定成为一个不可以破坏的默认约定，这能让项目负责人减少很多不必要的麻烦。</p><p>所以，关于 POJO 属性的访问修饰符，规定如下：</p><ul><li>之前用 public 的保留，新加的一律用 private，private 的属性均需要添加 setter 和 getter。</li><li>这样能避免某些地方需要 setter 的应用场景不能按预期实现功能，否则可能要到数据异常或者出错时才能发现。</li></ul><p>推荐使用 lombok，这样就不需要自己维护 setter 和 getter 了，非常省事儿，配合 IDEA 的 lombok 插件，省心，用上了就离不开了。 </p><h1 id="关于使用-Map-类型作为参数或者返回值的经验"><a href="#关于使用-Map-类型作为参数或者返回值的经验" class="headerlink" title="关于使用 Map 类型作为参数或者返回值的经验"></a>关于使用 Map 类型作为参数或者返回值的经验</h1><p>一开始可以给出一个规则，让团队成员根据规则掌握什么情况能用 Map，什么情况不能用 Map，但是，事与愿违，并不是每个团队成员都能时时刻刻记住和领悟这个规定，总是有人违反规定写出一些不合格的代码。<br>考虑到，使用 Map 带来的好处要远远小于使用它带来的坏处，何不干脆规定，所有人都不能用它作为参数和返回值呢？</p><h1 id="线上环境，-properties-配置中文信息时的注意事项"><a href="#线上环境，-properties-配置中文信息时的注意事项" class="headerlink" title="线上环境，.properties 配置中文信息时的注意事项"></a>线上环境，.properties 配置中文信息时的注意事项</h1><ol><li>直接通过终端，执行 vi 直接编辑，粘贴中文，再次 vi 或者 cat 看到的是中文信息，那程序读到的将会是乱码。</li><li>应该在 idea 里编辑好，可以单独新加一个文件，把线上的内容复制下来，修改带有中文信息的配置，然后上传，覆盖线上的文件。这样操作之后，vi 或者 cat 看到的将会是\u开头的字符，这样程序读出来的才是正常的。</li><li>作为经验教训，建议在配置文件里尽量不要用中文信息。</li></ol><h1 id="调用-api-自定义错误信息"><a href="#调用-api-自定义错误信息" class="headerlink" title="调用 api 自定义错误信息"></a>调用 api 自定义错误信息</h1><p>实践：返回类型继承 RestApiView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回 RestApiView 的子类</span></span><br><span class="line">SyncShopView syncShopView = <span class="keyword">new</span> SyncShopView();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (syncShopAuthView.getSellerID() == <span class="number">0L</span>) &#123;</span><br><span class="line">    syncShopView.setSuccessOrFail(SuccessOrFailEnum.fail);</span><br><span class="line">    syncShopView.setExceptionCodeEnum(ExceptionCodeEnum.notAssignSellerID);</span><br><span class="line">    syncShopView.setMessage(<span class="string">"同步CRM商家信息：无法获取SellerID，请检查参数的正确性和完整性！"</span>);</span><br><span class="line">    <span class="keyword">return</span> syncShopView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接返回 RestApiView</span></span><br><span class="line">RestApiView restApiView = <span class="keyword">new</span> RestApiView();</span><br><span class="line">SyncRateAuthView syncRateAuthView = JsonHelper.json2Object(requestParametersView.apiParas, SyncRateAuthView.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (syncRateAuthView.getSellerID() == <span class="number">0L</span>) &#123;</span><br><span class="line">    restApiView.setSuccessOrFail(SuccessOrFailEnum.fail);</span><br><span class="line">    restApiView.setExceptionCodeEnum(ExceptionCodeEnum.notAssignSellerID);</span><br><span class="line">    restApiView.setMessage(<span class="string">"同步Rate商家信息：无法获取SellerID，请检查参数的正确性和完整性！"</span>);</span><br><span class="line">    <span class="keyword">return</span> restApiView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Diamond-types-are-not-supported-at-this-language-level"><a href="#Diamond-types-are-not-supported-at-this-language-level" class="headerlink" title="Diamond types are not supported at this language level"></a>Diamond types are not supported at this language level</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; paraMapForInit = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><p>解决办法：</p><ol><li>中规中矩的把 new HashMap&lt;&gt;() 写成 new HasMap&lt;String, Object&gt;();</li><li>添加 spring-boot 插件。在 pom.xml 添加下面的内容。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>添加之后，IDEA 给的建议是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Explicit type argument Integer can be replaced with &lt;&gt; less... (Ctrl+F1) </span><br><span class="line">This inspection reports all new expressions with type arguments which can be replaced with diamond type &lt;&gt;</span><br><span class="line">Such &lt;&gt; syntax is not supported under Java 1.6 or earlier JVMs.</span><br></pre></td></tr></table></figure></p><p>这个时候，这样定义即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; paraMapForInit = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure></p><h1 id="java-lang-String-cannot-be-cast-to-org-springframework-mail-javamail-JavaMailSender"><a href="#java-lang-String-cannot-be-cast-to-org-springframework-mail-javamail-JavaMailSender" class="headerlink" title="java.lang.String cannot be cast to org.springframework.mail.javamail.JavaMailSender"></a>java.lang.String cannot be cast to org.springframework.mail.javamail.JavaMailSender</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crm.common.application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AndyChen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 解决在静态方法内不能调用非静态Mapper实例的问题</span></span><br><span class="line"><span class="comment"> * 用法：</span></span><br><span class="line"><span class="comment"> * static MapperName mapperName;</span></span><br><span class="line"><span class="comment"> * if (null == mapperName) &#123;</span></span><br><span class="line"><span class="comment"> *  mapperName = (MapperName)BeanTools.getBean(MapperName.class);</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017-01-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanTools</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(Class classname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> applicationContext.getBean(classname);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定要加上：&lt;context:component-scan base-package=”com.crm.common.application”/&gt;<br>否则，下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> JavaMailSender javaMailSender = (JavaMailSender) BeanTools.getBean(JavaMailSender.class);</span><br></pre></td></tr></table></figure></p><p>会报这样的错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.String cannot be cast to org.springframework.mail.javamail.JavaMailSender</span><br></pre></td></tr></table></figure></p><h1 id="spring-boot-执行-jar-报错"><a href="#spring-boot-执行-jar-报错" class="headerlink" title="spring boot 执行 jar 报错"></a>spring boot 执行 jar 报错</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[utomcat@192 webapps]$ java -jar web.jar </span><br><span class="line">no main manifest attribute, in web.jar</span><br><span class="line"># 我一种方式，还是不行。</span><br><span class="line">java -cp doman.web.Application</span><br></pre></td></tr></table></figure><p>之前的打包方式，是在 idea 的 Artifacts 里引入了一个 web 项目，然后 Build Artifacts …</p><p>现在，换一种方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br><span class="line"># 直接运行下面的脚本即可，会自动找到 spring boot 的启动类</span><br><span class="line">java -jar web.jar</span><br></pre></td></tr></table></figure></p><p>OK 了。</p><h1 id="spring-配置报错：cvc-complex-type-2-1-Element-‘mvc-annotation-driven’-must-have-no-character-or-element-information-item-children-because-the-type’s-content-type-is-empty"><a href="#spring-配置报错：cvc-complex-type-2-1-Element-‘mvc-annotation-driven’-must-have-no-character-or-element-information-item-children-because-the-type’s-content-type-is-empty" class="headerlink" title="spring 配置报错：cvc-complex-type.2.1: Element ‘mvc:annotation-driven’ must have no character or element information item [children], because the type’s content type is empty."></a>spring 配置报错：cvc-complex-type.2.1: Element ‘mvc:annotation-driven’ must have no character or element information item [children], because the type’s content type is empty.</h1><p>在一个比较老的项目里，配置报错：Element mvc:message-converters is not allowed here，没管，直接运行项目，得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.xml.sax.SAXParseException; lineNumber: 81; columnNumber: 29; cvc-complex-type.2.1: Element &apos;mvc:annotation-driven&apos; must have no character or element information item [children], because the type&apos;s content type is empty.</span><br></pre></td></tr></table></figure></p><p>网上一查资料，原来是 Spring 3.1 及以上才支持这种配置方式，这里我用的是 spring 4.3.2，但是 dispatcher-servlet.xml 配置文件里的版本却停留在3.0，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>改成，不加版本号的即可解决问题：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="java-把-gbk-格式的文件，转为-UTF8"><a href="#java-把-gbk-格式的文件，转为-UTF8" class="headerlink" title="java 把 gbk 格式的文件，转为 UTF8"></a>java 把 gbk 格式的文件，转为 UTF8</h1><p><a href="https://github.com/downgoon/gbk2utf8" target="_blank" rel="noopener">https://github.com/downgoon/gbk2utf8</a><br>直接提供了工具，下载先来，一条命令全搞定。<code>java -jar gbk2utf8-0.0.1-SNAPSHOT-all.jar $src-gbk-path $dst-utf8-path</code><br>而且关键是，如果源目录中既有GBK，又有UTF-8，很多工具最终笼统的对每个文件都 <code>GBK -&gt; UTF-8</code>，会导致原本就是UTF-8，被误做GBK转码，最后出来的反而是乱码的，这个工具首先识别了源文件是否是GBK，只有是GBK的才转，不是GBK的直接跳过。</p><h1 id="view-enumeration-是否要全部放到一个-module-管理？"><a href="#view-enumeration-是否要全部放到一个-module-管理？" class="headerlink" title="view, enumeration 是否要全部放到一个 module 管理？"></a>view, enumeration 是否要全部放到一个 module 管理？</h1><p>以 view 为例。<br>如果放到公共的 view module，这样虽然方便添加和查找，但是如此一来，会增加项目耦合，本来只需要引用一个 module 即可，但是因为这个项目依赖于 view 对应的 module，不得不两个 module 一起引用。<br>建议：如果 view 并不具有公共性，仅与某个 module 相关，则直接放到此 module，这样其它项目依赖此 module 时，仅依赖这一个 module 即可。<br>后续：如果某个 view 变得被多个项目依赖，可以考虑将其提取到公共的、专门的 view module。</p><h1 id="Jackson-Unrecognized-field-not-marked-as-ignorable"><a href="#Jackson-Unrecognized-field-not-marked-as-ignorable" class="headerlink" title="Jackson Unrecognized field, not marked as ignorable"></a>Jackson Unrecognized field, not marked as ignorable</h1><p>Jackson是一个可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象的框架。非常方便，同时也很高效。<br>最近在使用时，将前台传递的JSON 串转成Java实体对象时，出现了Unrecognized field, not marked as ignorable 错误。该错误的意思是说，不能够识别的字段没有标示为可忽略。出现该问题的原因就是JSON中包含了目标Java对象没有的属性。</p><p>解决方法有如下几种：<br>格式化输入内容，保证传入的JSON串不包含目标对象的没有的属性。<br><code>@JsonIgnoreProperties(ignoreUnknown = true)</code> 在目标对象的类级别上加上该注解，并配置<code>ignoreUnknown = true</code>，则Jackson在反序列化的时候，会忽略该目标对象不存在的属性。<br>全局DeserializationFeature配置<br><code>objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);</code> 配置该objectMapper在反序列化时，忽略目标对象没有的属性。凡是使用该objectMapper反序列化时，都会拥有该特性。</p><h1 id="Invalid-bound-statement-not-found-express-dal-mapper-original-GwCpInfoMapper-selectByPrimaryKey"><a href="#Invalid-bound-statement-not-found-express-dal-mapper-original-GwCpInfoMapper-selectByPrimaryKey" class="headerlink" title="Invalid bound statement (not found): express.dal.mapper.original.GwCpInfoMapper.selectByPrimaryKey"></a>Invalid bound statement (not found): express.dal.mapper.original.GwCpInfoMapper.selectByPrimaryKey</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="maven-项目，依赖三方-jar-包，打包项目时自动包含"><a href="#maven-项目，依赖三方-jar-包，打包项目时自动包含" class="headerlink" title="maven 项目，依赖三方 jar 包，打包项目时自动包含"></a>maven 项目，依赖三方 jar 包，打包项目时自动包含</h1><p>以下配置，仅开发环境可用，打包时并不能打到 war 和 生意人 lib 目录<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>open-api-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/sdkLib/open-api-sdk-2.0.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最终还是需要 mvn install 到本地仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=open-api-sdk-2.0.jar -DgroupId=jd -DartifactId=open-api-sdk -Dversion=2.0 -Dpackaging=jar</span><br></pre></td></tr></table></figure></p><p>依赖近成这样：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>open-api-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="idea每次编译设置工程的默认jdk版本1-5问题"><a href="#idea每次编译设置工程的默认jdk版本1-5问题" class="headerlink" title="idea每次编译设置工程的默认jdk版本1.5问题"></a>idea每次编译设置工程的默认jdk版本1.5问题</h1><p>出现这样的原因应该是Maven插件的默认配置有问题。解决方法是在”pom.xml”里加入如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="如果-maven-依赖不能下载，试一下，mvn-compile，看看会不会报错，因为有可能是-maven-配置文件有错。"><a href="#如果-maven-依赖不能下载，试一下，mvn-compile，看看会不会报错，因为有可能是-maven-配置文件有错。" class="headerlink" title="如果 maven 依赖不能下载，试一下，mvn compile，看看会不会报错，因为有可能是 maven 配置文件有错。"></a>如果 maven 依赖不能下载，试一下，mvn compile，看看会不会报错，因为有可能是 maven 配置文件有错。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ERROR] Error executing Maven.</span><br><span class="line">[ERROR] 1 problem was encountered while building the effective settings</span><br><span class="line">[FATAL] Non-parseable settings C:\Users\andy\.m2\settings.xml: end tag name &lt;/mirrors&gt; must match start tag name &lt;settings&gt; from line 46 (position: TEXT seen ...&lt;/mirror&gt;\n      --&gt;\n &lt;/mirrors&gt;... @173:12)  @ C:\Users</span><br><span class="line">\andy\.m2\settings.xml, line 173, column 12</span><br></pre></td></tr></table></figure><p>maven 配置文件时的 <mirrorof>*</mirrorof> 会导致  pom.xml 文件里配置的 repository 不生效，解决办法就是，在 setting.xml 的 mirrorOf 配置里排除，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!spring-milestones<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="tomcat-下，一个应用程序，发布成两个虚拟目录，该应用配置了-druid-防火墙，会冲突"><a href="#tomcat-下，一个应用程序，发布成两个虚拟目录，该应用配置了-druid-防火墙，会冲突" class="headerlink" title="tomcat 下，一个应用程序，发布成两个虚拟目录，该应用配置了 druid 防火墙，会冲突"></a>tomcat 下，一个应用程序，发布成两个虚拟目录，该应用配置了 druid 防火墙，会冲突</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: javax.management.InstanceAlreadyExistsException: com.alibaba.druid.wall:name=wall-filter,type=WallFilter</span><br><span class="line">...</span><br><span class="line">Caused by: org.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [com.alibaba.druid.wall.WallFilter@72ae610b] with key &apos;wall-filter&apos;; nested exception is javax.management.InstanceAlreadyExistsException: com.alibaba.druid.wall:name=wall-filter,type=WallFilter</span><br></pre></td></tr></table></figure><p>解决办法：<br>将配置文件中的这些配置的 ID 改得不一样即可：<br>WallConfig、WallFilter、StatFilter、DruidDataSource</p><h1 id="extend-Mapper-can-39-t-load-Instantiation-of-bean-failed-nested-exception-is-java-lang-ExceptionInInitializerError"><a href="#extend-Mapper-can-39-t-load-Instantiation-of-bean-failed-nested-exception-is-java-lang-ExceptionInInitializerError" class="headerlink" title="extend Mapper can&#39;t load: Instantiation of bean failed; nested exception is java.lang.ExceptionInInitializerError"></a><code>extend Mapper can&#39;t load: Instantiation of bean failed; nested exception is java.lang.ExceptionInInitializerError</code></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">22:02:03,660 &lt;org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext&gt;  WARN [restartedMain]: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;expressHDalServiceImpl&apos; defined in file [C:\workspace\java\shard-test\public.biz\biz.dal\target\classes\biz\dal\shard\service\impl\ExpressHDalServiceImpl.class]: Instantiation of bean failed; nested exception is java.lang.ExceptionInInitializerError</span><br><span class="line">22:02:03,669 &lt;com.alibaba.druid.pool.DruidDataSource&gt;  INFO [restartedMain]: &#123;dataSource-1&#125; closed</span><br><span class="line">22:02:03,671 &lt;org.apache.catalina.core.StandardService&gt;  INFO [restartedMain]: Stopping service [Tomcat]</span><br><span class="line">22:02:03,700 &lt;org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer&gt;  INFO [restartedMain]: </span><br><span class="line"></span><br><span class="line">Error starting ApplicationContext. To display the auto-configuration report re-run your application with &apos;debug&apos; enabled.</span><br><span class="line">22:02:03,711 &lt;org.springframework.boot.SpringApplication&gt; ERROR [restartedMain]: Application startup failed</span><br><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;expressHDalServiceImpl&apos; defined in file [C:\workspace\java\shard-test\public.biz\biz.dal\target\classes\biz\dal\shard\service\impl\ExpressHDalServiceImpl.class]: Instantiation of bean failed; nested exception is java.lang.ExceptionInInitializerError</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1155) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1099) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:513) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:483) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:761) ~[spring-beans-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543) ~[spring-context-4.3.13.RELEASE.jar:4.3.13.RELEASE]</span><br><span class="line">at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) ~[spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:693) [spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:360) [spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:303) [spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1118) [spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at org.springframework.boot.SpringApplication.run(SpringApplication.java:1107) [spring-boot-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">at boot.alibaba.BootAlibaba.main(BootAlibaba.java:23) [classes/:?]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]</span><br><span class="line">at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) [spring-boot-devtools-1.5.9.RELEASE.jar:1.5.9.RELEASE]</span><br><span class="line">Caused by: java.lang.ExceptionInInitializerError</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_121]</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_121]</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_121]</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_121]</span><br></pre></td></tr></table></figure><p>这种情况，需要检查 mapper 里的类型是否正确。如下面的：parameterType, type。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;X&quot;&gt; </span><br><span class="line">&lt;select id=&quot;selectEcodes&quot; parameterType=&quot;Y&quot; resultMap=&quot;BaseResultMap&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>本次遇到的问题，是在用 IDEA 修改包名进行重构的过程中，把 X 和 Y 的 package 路径给去掉了。<br>导致 spring boot 项目启动报错。<br>这种错，很难一下子定位到，因为在改 package name 之前一直是运行正常的。<br>为了排查这个错，将项目 copy 一份，去掉报错的 mapper 之外的所有 mapper，然后去掉里的配置，即 xml 内容，只保留一份从 用 MGB 生成的代码里 copy 过来的简单的，结果启动正常，然后添加一个原有的，结果报错，再仔细看 xml 内容，才发现是类名之前没有加 package 路径，加上就可以了。</p><h1 id="获取-xml-配置文件里定义的-bean-信息"><a href="#获取-xml-配置文件里定义的-bean-信息" class="headerlink" title="获取 xml 配置文件里定义的 bean 信息"></a>获取 xml 配置文件里定义的 bean 信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);  </span><br><span class="line">BaseDAO dao = (BaseDAO) context.getBean(&quot;sqlBaseDAO&quot;, BaseDAOImpl.class);</span><br></pre></td></tr></table></figure><h1 id="json-lib-json-lib-jar-2-4-依赖，在-IDEA-的依赖项里面，显示红色下划线，当然，引用其中的类是有问题的。"><a href="#json-lib-json-lib-jar-2-4-依赖，在-IDEA-的依赖项里面，显示红色下划线，当然，引用其中的类是有问题的。" class="headerlink" title="json-lib:json-lib:jar:2.4 依赖，在 IDEA 的依赖项里面，显示红色下划线，当然，引用其中的类是有问题的。"></a><code>json-lib:json-lib:jar:2.4</code> 依赖，在 IDEA 的依赖项里面，显示红色下划线，当然，引用其中的类是有问题的。</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>2.4 版本的依赖引用格式，是在 <a href="http://mvnrepository.com/artifact/net.sf.json-lib/json-lib/2.4" target="_blank" rel="noopener">http://mvnrepository.com/artifact/net.sf.json-lib/json-lib/2.4</a> 找到的，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>maven 项目，IDEA。pom.xml 文件里显示正常，但引用 <code>net.sf.json</code> 下定义的类时显示红色，即找不到依赖。刷新 maven 依赖，依赖项 json-lib-2.4 显示红色下红线。进入本地 maven 依赖库的下载目录查看，发现下载的是 json-lib-2.4-jdk15.jar，并非预期中的 json-lib-2.4.jar。</li><li>另外，在一个旧的，非 maven 项目里，引用的是 <code>json-lib-2.4.jar</code>，引用 <code>net.sf.json</code> 下定义的类，正常。</li></ol><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>度娘了一下，原来通过 Maven 引用时，需要添加 <code>&lt;classifier&gt;jdk15&lt;/classifier&gt;</code>，这应该是 maven 仓库只有基于 jdk1.5 的版本。完整的引用：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="利用反射，实现读取-pojo-field-与对应值"><a href="#利用反射，实现读取-pojo-field-与对应值" class="headerlink" title="利用反射，实现读取 pojo field 与对应值"></a>利用反射，实现读取 pojo field 与对应值</h1><p>以下代码，假设 pojo 的字段均为普通数据类型，即都可以 toString() 显示正确值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class reClass = Class.forName(<span class="string">"domain.pojoClass"</span>);</span><br><span class="line">Field fieldList[] = reClass.getDeclaredFields();</span><br><span class="line">String result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Field field : fieldList) &#123;</span><br><span class="line">    System.out.println(<span class="string">"ke="</span> + field.getName() + <span class="string">", value="</span> + field.get(outerParameters).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="类似-isLogin-用-int-类型的数据，如果用-bool-类型数据，用-idea-生成的-getter-会跟变量名一致，容易混淆。"><a href="#类似-isLogin-用-int-类型的数据，如果用-bool-类型数据，用-idea-生成的-getter-会跟变量名一致，容易混淆。" class="headerlink" title="类似 isLogin 用 int 类型的数据，如果用 bool 类型数据，用 idea 生成的 getter 会跟变量名一致，容易混淆。"></a>类似 isLogin 用 int 类型的数据，如果用 bool 类型数据，用 idea 生成的 getter 会跟变量名一致，容易混淆。</h1><p>如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLogin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogin</span><span class="params">(<span class="keyword">boolean</span> login)</span> </span>&#123;</span><br><span class="line">        isLogin = login;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用 int 则清晰自然：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> isLogin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIsLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsLogin</span><span class="params">(<span class="keyword">int</span> isLogin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.isLogin = isLogin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比较时这样用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (verificationCode.getIsLogin() == YesOrNoEnum.yes.getIndex()) &#123;</span><br><span class="line">   <span class="comment">//some code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>附 YesOrNoEnum 代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> YesOrNoEnum &#123;</span><br><span class="line">    no(<span class="number">0</span>, <span class="string">"否"</span>),</span><br><span class="line">    yes(<span class="number">1</span>, <span class="string">"是"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    YesOrNoEnum(<span class="keyword">int</span> index, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> YesOrNoEnum <span class="title">getEnumByIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (YesOrNoEnum result : YesOrNoEnum.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index == result.index) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="运行-mvn-spring-boot-run-之后，再次运行，或者运行-spring-boot-的入口程序，端口会冲突"><a href="#运行-mvn-spring-boot-run-之后，再次运行，或者运行-spring-boot-的入口程序，端口会冲突" class="headerlink" title="运行 mvn spring-boot:run 之后，再次运行，或者运行 spring boot 的入口程序，端口会冲突"></a>运行 mvn spring-boot:run 之后，再次运行，或者运行 spring boot 的入口程序，端口会冲突</h1><p>解决：<br>taskkill /f /t /im java.exe</p><h1 id="用-jackson-将数组类型的数据转换成-string-会报错。"><a href="#用-jackson-将数组类型的数据转换成-string-会报错。" class="headerlink" title="用 jackson 将数组类型的数据转换成 string 会报错。"></a>用 jackson 将数组类型的数据转换成 string 会报错。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">08:33:26,505 &lt;apg.biz.dal.mapper.original.MemberMapper.selectByExample&gt; DEBUG [http-nio-83-exec-2]: &lt;==      Total: 0</span><br><span class="line">com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot deserialize instance of `java.lang.String` out of START_ARRAY token</span><br><span class="line"> at [Source: (String)&quot;&#123;&quot;openid&quot;:&quot;omqgp1i32V3SRMNXDgt_fopdWIHA&quot;,&quot;nickname&quot;:&quot;Andy chen&quot;,&quot;sex&quot;:1,&quot;language&quot;:&quot;zh_CN&quot;,&quot;city&quot;:&quot;成都&quot;,&quot;province&quot;:&quot;四川&quot;,&quot;country&quot;:&quot;中国&quot;,&quot;headimgurl&quot;:&quot;http:\/\/thirdwx.qlogo.cn\/mmopen\/vi_32\/8Djic7qt2ic0SU1a7Wdvibr26QHEibBtVbnScE7p2j3MFFqFJHYfrcZNFGl6qIsmPrgiaX8BwLlOicj2PztDPcAhQDmQ\/132&quot;,&quot;privilege&quot;:[],&quot;unionid&quot;:&quot;obd3QwduPRnX0J5e-zHh8kHWg93A&quot;&#125;&quot;; line: 1, column: 302] (through reference chain: com.github.wxpay.sdk.response.WxGetUserInfoResponse[&quot;privilege&quot;])</span><br></pre></td></tr></table></figure><p>修改 pojo 对应的属性，修改为正确的 List 类型即可。</p><h1 id="The-server-time-zone-value-39-�й���׼ʱ��-39-is-unrecognized-or-represents-more-than-one-time-zone"><a href="#The-server-time-zone-value-39-�й���׼ʱ��-39-is-unrecognized-or-represents-more-than-one-time-zone" class="headerlink" title="The server time zone value &#39;�й���׼ʱ��&#39; is unrecognized or represents more than one time zone"></a><code>The server time zone value &#39;�й���׼ʱ��&#39; is unrecognized or represents more than one time zone</code></h1><p>在项目代码-数据库连接URL后，加上 （注意大小写必须一致）<code>?serverTimezone=UTC</code></p><h1 id="JAVA对象通过jackson转成json格式，属性名首字母变成小写的解决方法"><a href="#JAVA对象通过jackson转成json格式，属性名首字母变成小写的解决方法" class="headerlink" title="JAVA对象通过jackson转成json格式，属性名首字母变成小写的解决方法"></a>JAVA对象通过jackson转成json格式，属性名首字母变成小写的解决方法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JsonProperty //不加此注解的话，返回的字段属性会变成：wxofficialAccount</span><br><span class="line">private String WXOfficialAccount;</span><br></pre></td></tr></table></figure><h1 id="package-com-sun-xml-internal-messaging-saaj-util-does-not-exist"><a href="#package-com-sun-xml-internal-messaging-saaj-util-does-not-exist" class="headerlink" title="package com.sun.xml.internal.messaging.saaj.util does not exist"></a><code>package com.sun.xml.internal.messaging.saaj.util does not exist</code></h1><p>项目里引用的是 jdk 自带的，位于：<code>C:\dev\Java\jdk1.8.0_161\jre\lib\rt.jar!\com\sun\xml\internal\messaging\saaj\util\Base64.class</code><br>在服务器上通过 maven 编译的时候，提示找不到。<br>解决办法：<br>添加 Maven 依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.sun.xml.messaging.saaj&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;saaj-impl&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><h1 id="多模板项目，服务器上进入-web-工程-mvn-编译找不到-model"><a href="#多模板项目，服务器上进入-web-工程-mvn-编译找不到-model" class="headerlink" title="多模板项目，服务器上进入 web 工程 mvn 编译找不到 model"></a>多模板项目，服务器上进入 web 工程 mvn 编译找不到 model</h1><p>解决：到根目录编译</p><h1 id="Spring-Boot-Application-in-default-package"><a href="#Spring-Boot-Application-in-default-package" class="headerlink" title="Spring Boot Application in default package"></a>Spring Boot Application in default package</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot Application in default package less… (Ctrl+F1)</span><br><span class="line">Inspection info: Checks Spring Boot Application Setup.</span><br><span class="line">@SpringBootApplication used in default package</span><br><span class="line">Redundant @ComponentScan declaration</span><br><span class="line">Redundant @EnableAutoConfiguration declaration</span><br><span class="line">New in 2018.2</span><br></pre></td></tr></table></figure><p>是因为把main 函数直接放在了java 目录之下，当放在java目录下的 package目录；</p><p>另外官方给出的解决方案是：<br>@springbootApplication 注解失效的情况下，推荐使用@CompentScan 和@EnableAutoConfiguration进行代替；</p><h1 id="Not-registered-via-EnableConfigurationProperties-or-marked-as-Spring-component"><a href="#Not-registered-via-EnableConfigurationProperties-or-marked-as-Spring-component" class="headerlink" title="Not registered via @EnableConfigurationProperties or marked as Spring component"></a>Not registered via @EnableConfigurationProperties or marked as Spring component</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not registered via @EnableConfigurationProperties or marked as Spring component less... (Ctrl+F1) </span><br><span class="line">Inspection info: Verifies @ConfigurationProperties setup. New in 2018.3</span><br></pre></td></tr></table></figure><p>解决：添加注解 @Component</p><h1 id="but-snakeyaml-was-not-found-on-the-classpath"><a href="#but-snakeyaml-was-not-found-on-the-classpath" class="headerlink" title="but snakeyaml was not found on the classpath"></a>but snakeyaml was not found on the classpath</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalStateException: Attempted to load applicationConfig: [classpath:/application.yml] but snakeyaml was not found on the classpath</span><br></pre></td></tr></table></figure><p>解决：添加如下依赖即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="Loading-class-com-mysql-jdbc-Driver’-This-is-deprecated"><a href="#Loading-class-com-mysql-jdbc-Driver’-This-is-deprecated" class="headerlink" title="Loading class `com.mysql.jdbc.Driver’. This is deprecated"></a>Loading class `com.mysql.jdbc.Driver’. This is deprecated</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">database:</span><br><span class="line">  host: 192.168.1.88</span><br><span class="line">  username: admin</span><br><span class="line">  password: 123!@#321AbC</span><br><span class="line">  schemaName: mbg</span><br><span class="line">  keepPrefix: crm</span><br><span class="line">  tableNamePrefixCount: 3</span><br><span class="line">  keepPrefixTableList:</span><br><span class="line">    - erpTrade</span><br><span class="line">    - erpShopConfig</span><br></pre></td></tr></table></figure><p>报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Loading class `com.mysql.jdbc.Driver&apos;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&apos;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure></p><p>将<code>com.mysql.jdbc.Driver</code>改为<code>com.mysql.cj.jdbc.Driver</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.cj.exceptions.InvalidConnectionAttributeException: The server time zone value &apos;ÖÐ¹ú±ê×¼Ê±¼ä&apos; is unrecognized or represents more than one time zone. You must configure either the server or JDBC driver (via the serverTimezone configuration property) to use a more specifc time zone value if you want to utilize time zone support.</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br></pre></td></tr></table></figure><p>在连接字符串后面加参数serverTimezone=GMT&amp;<br>由于数据库和系统时区差异所造成的，在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8，否则会被解析为空。再一个解决办法就是使用低版本的MySQL jdbc驱动，5.1.28不会存在时区的问题。</p><p>或者<br>在<code>[mysqld]</code>节点在节点下面加上下面这句话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default-time-zone=&apos;+08:00&apos;</span><br></pre></td></tr></table></figure></p><h1 id="Cannot-obtain-primary-key-information-from-the-database"><a href="#Cannot-obtain-primary-key-information-from-the-database" class="headerlink" title="Cannot obtain primary key information from the database"></a>Cannot obtain primary key information from the database</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot obtain primary key information from the database, generated objects may be incomplete</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/jpf254/article/details/79571396" target="_blank" rel="noopener">https://blog.csdn.net/jpf254/article/details/79571396</a></p><h1 id="pom-xml-的groupId与artifactId，不能有两个相同的"><a href="#pom-xml-的groupId与artifactId，不能有两个相同的" class="headerlink" title="pom.xml 的groupId与artifactId，不能有两个相同的"></a>pom.xml 的groupId与artifactId，不能有两个相同的</h1><p>否则，在子项目中，依赖会异常<br>只要改其中一项即可</p><h1 id="Maven项目下HttpServletRequest-或-HttpServletResponse需引用的依赖包"><a href="#Maven项目下HttpServletRequest-或-HttpServletResponse需引用的依赖包" class="headerlink" title="Maven项目下HttpServletRequest 或 HttpServletResponse需引用的依赖包"></a>Maven项目下HttpServletRequest 或 HttpServletResponse需引用的依赖包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/org.glassfish/javax.servlet --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.glassfish&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="改变自动扫描的包"><a href="#改变自动扫描的包" class="headerlink" title="改变自动扫描的包"></a>改变自动扫描的包</h1><p><code>@ComponentScan(basePackages = {&quot;org.test1&quot;,&quot;org.test2&quot;})</code><br>在启动类中添加了该注解之后，即可扫描org.test2不同包下的注解类了，这里需要注意的是：在修改了自动扫描的包的情况下，默认的自动扫描与启动类同包以及子包下的注解类就不生效了，如果还想要自动扫描与启动类同包以及子包下的注解类的话，就需要手动加上，这里就加上了org.test1</p><h1 id="spring-boot-以-jar-启动"><a href="#spring-boot-以-jar-启动" class="headerlink" title="spring boot 以 jar 启动"></a>spring boot 以 jar 启动</h1><p>参考官网<a href="https://docs.spring.io/spring-boot/docs/2.1.1.RELEASE/reference/htmlsingle/#getting-started-first-application-run" target="_blank" rel="noopener">getting-started-first-application-run</a></p><ol><li><p>添加插件<br>官网是这样描述的：To create an executable jar, we need to add the spring-boot-maven-plugin to our pom.xml. To do so, insert the following lines just below the dependencies section:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>保存 pom.xml 文件之后，执行打包命令：<code>mvn clean package -Dmaven.test.skip=true</code>，如果需要执行单元测试，则直接 <code>mvn package</code> </p></li><li>将 jar 包上传至服务器，同时把生产环境的配置文件（比如 application.yml）修改好之后放到与 jar 文件相同的目录，运行：<code>java -jar my-project-0.0.1.jar</code>，不需要的时候 Ctrl+c 就退出，如果需要一直运行，可设置成开机启动。</li></ol><h1 id="注解-SuppressWarnings-“rawtypes”-“unchecked”"><a href="#注解-SuppressWarnings-“rawtypes”-“unchecked”" class="headerlink" title="注解 @SuppressWarnings({ “rawtypes”, “unchecked” })"></a>注解 @SuppressWarnings({ “rawtypes”, “unchecked” })</h1><p>java.lang.SuppressWarnings是J2SE 5.0中标准的Annotation之一。可以标注在类、字段、方法、参数、构造方法，以及局部变量上。作用：告诉编译器忽略指定的警告，不用在编译完成后出现警告信息。</p><h1 id="PropertiesLoaderUtils-loadAllProperties-“common-properties”"><a href="#PropertiesLoaderUtils-loadAllProperties-“common-properties”" class="headerlink" title="PropertiesLoaderUtils.loadAllProperties(“common.properties”);"></a>PropertiesLoaderUtils.loadAllProperties(“common.properties”);</h1><p>通过 <code>PropertiesLoaderUtils.loadAllProperties</code> 加载配置文件，配置文件 <code>common.properties</code>，需要放到启动项目的 <code>resources</code> 目录下，否则项目上线到生产环境，将同名文件放到 <code>/WEB-INF/classes/</code> 目录下，达不到覆盖的目的。<br>todo: 研究一下读取文件的目录顺序</p><h1 id="jackson解析时间"><a href="#jackson解析时间" class="headerlink" title="jackson解析时间"></a>jackson解析时间</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String &quot;2019-06-29 17:25&quot;: not a valid representation (error: Failed to parse Date value &apos;2019-06-29 17:25&apos;: Cannot parse date &quot;2019-06-29 17:25&quot;: while it seems to fit format &apos;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ&apos;, parsing fails (leniency? null))</span><br><span class="line"> at [Source: (String)&quot;&#123;&quot;pagingView&quot;:&#123;&quot;pageSize&quot;:10,&quot;currentPage&quot;:1&#125;,&quot;createdAtBegin&quot;:&quot;2019-06-29 17:25&quot;,&quot;createdAtEnd&quot;:&quot;2019-07-06 17:25&quot;&#125;&quot;; line: 1, column: 64] (through reference chain: mis.api.biz.model.request.StudentQueryRequest[&quot;createdAtBegin&quot;])</span><br></pre></td></tr></table></figure><p>将日期转换成时间戳再传递</p><p>自定义jackson解析时间格式yyy-MM-dd HH:mm:ss<br><a href="https://my.oschina.net/xpx/blog/1924695" target="_blank" rel="noopener">https://my.oschina.net/xpx/blog/1924695</a></p><p>SpringBoot中后台无法接受前台日期字符串 yyyy-MM-dd HH:mm:ss<br><a href="https://my.oschina.net/u/3694704/blog/2243415" target="_blank" rel="noopener">https://my.oschina.net/u/3694704/blog/2243415</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java 开发中的小经验，零散的知识点。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="https://www.lovesofttech.com/categories/java/"/>
    
      <category term="experience" scheme="https://www.lovesofttech.com/categories/java/experience/"/>
    
    
      <category term="experience" scheme="https://www.lovesofttech.com/tags/experience/"/>
    
      <category term="java" scheme="https://www.lovesofttech.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux 工作中的一些小经验</title>
    <link href="https://www.lovesofttech.com/linux/experience/"/>
    <id>https://www.lovesofttech.com/linux/experience/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-08-22T13:36:38.653Z</updated>
    
    <content type="html"><![CDATA[<p>使用 linux 的小经验，零散的知识点。<br><a id="more"></a></p><h1 id="CentOS设置系统时间与网络时间同步"><a href="#CentOS设置系统时间与网络时间同步" class="headerlink" title="CentOS设置系统时间与网络时间同步"></a>CentOS设置系统时间与网络时间同步</h1><ul><li>安装 <code>ntpdate</code> 工具: <code>yum -y install ntp ntpdate</code></li><li>设置系统时间与网络时间同步: <code>ntpdate cn.pool.ntp.org</code></li><li>将系统时间写入硬件时间: <code>hwclock --systohc</code></li><li>强制系统时间写入CMOS中防止重启失效：<code>hwclock -w</code> 或 <code>clock -w</code></li></ul><h1 id="linux-find命令：忽略一个目录或者多个目录"><a href="#linux-find命令：忽略一个目录或者多个目录" class="headerlink" title="linux find命令：忽略一个目录或者多个目录"></a>linux find命令：忽略一个目录或者多个目录</h1><h1 id="忽略一个目录"><a href="#忽略一个目录" class="headerlink" title="忽略一个目录"></a>忽略一个目录</h1><p>根目录下开始查找，忽略目录 <code>/media</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic /]# find / -path &quot;/media&quot; -prune -o -name my-venv -print</span><br><span class="line">/home/utomcat/python-apps/my-venv</span><br></pre></td></tr></table></figure></p><h2 id="忽略多个目录"><a href="#忽略多个目录" class="headerlink" title="忽略多个目录"></a>忽略多个目录</h2><p>根目录下开始查找，忽略目录 <code>/media</code> 和 <code>/home/utomcat</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># \( 和 \) 前后都有空格</span><br><span class="line">find / \( -path &quot;/media&quot; -o -path &quot;/home/utomcat&quot; \) -prune -o -name my-venv -print</span><br><span class="line"></span><br><span class="line"># -type f 表示只找文件</span><br><span class="line">[root@AndyCentOS7Basic /]# find / -path &quot;/media&quot; -prune -o -type f -name apache-tomcat-8.5.30.tar.gz -print</span><br><span class="line">/home/utomcat/soft/apache-tomcat-8.5.30.tar.gz</span><br><span class="line"></span><br><span class="line"># 没有 -print 则会忽略的目录也显示出来</span><br><span class="line">[root@AndyCentOS7Basic /]# find / -path &quot;/media&quot; -prune -o -type f -name apache-tomcat-8.5.30.tar.gz</span><br><span class="line">/home/utomcat/soft/apache-tomcat-8.5.30.tar.gz</span><br><span class="line">/media</span><br></pre></td></tr></table></figure></p><h1 id="将文件移动到一个不存在的目录，文件消失"><a href="#将文件移动到一个不存在的目录，文件消失" class="headerlink" title="将文件移动到一个不存在的目录，文件消失"></a>将文件移动到一个不存在的目录，文件消失</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-8.0.16-2.el7.x86_64.rpm-bundle.tar /mysql</span><br></pre></td></tr></table></figure><p><code>/mysql</code> 这个目录不存在，于是这个文件就这样消失了</p><p>用 find 命令查找也查不到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost soft]# find / -name mysql-8.0.16-2.el7.x86_64.rpm-bundle.tar  </span><br><span class="line">[root@localhost soft]#</span><br></pre></td></tr></table></figure></p><h1 id="bash-unzip-command-not-found"><a href="#bash-unzip-command-not-found" class="headerlink" title="-bash: unzip: command not found"></a><code>-bash: unzip: command not found</code></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y unzip zip</span><br></pre></td></tr></table></figure><h1 id="tomcat-内存占用"><a href="#tomcat-内存占用" class="headerlink" title="tomcat 内存占用"></a>tomcat 内存占用</h1><p>运行一段时间的 tomcat，内存使用上升之后不会自动降下来，重启 tomcat 即可让内存降低到初始启动状态。</p><p>不过这只是临时解决问题，根本还是需要优化或者升级硬件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 linux 的小经验，零散的知识点。&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.lovesofttech.com/categories/linux/"/>
    
      <category term="experience" scheme="https://www.lovesofttech.com/categories/linux/experience/"/>
    
    
      <category term="experience" scheme="https://www.lovesofttech.com/tags/experience/"/>
    
      <category term="linux" scheme="https://www.lovesofttech.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>PowerDesigner 样式设置，以及样式参考值</title>
    <link href="https://www.lovesofttech.com/general/powerDesignerStyle/"/>
    <id>https://www.lovesofttech.com/general/powerDesignerStyle/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-07-06T02:18:02.503Z</updated>
    
    <content type="html"><![CDATA[<p>默认样式是偏黄色的，屎黄屎黄的，有没有 ^o^~~<br><a id="more"></a><br>看图，图片下方有相关说明。</p><blockquote><p>图片较多，加载慢，请耐心等待~~</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleBefore.png" alt="默认样式，屎黄~~" title="">                </div>                <div class="image-caption">默认样式，屎黄~~</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleAfter.png" alt="修改过的样式，个人比较喜欢的清爽" title="">                </div>                <div class="image-caption">修改过的样式，个人比较喜欢的清爽</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerDisplayPreferences.png" alt="修改样式入口，打开 Model 之后，右键也可以找到 Display Preference..." title="">                </div>                <div class="image-caption">修改样式入口，打开 Model 之后，右键也可以找到 Display Preference...</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleGeneral.png" alt="设置背景样式，设置完成后，记得点击：Set As Default" title="">                </div>                <div class="image-caption">设置背景样式，设置完成后，记得点击：Set As Default</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleTableFill.png" alt="表格样式--设置背景样式" title="">                </div>                <div class="image-caption">表格样式--设置背景样式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleTableLine.png" alt="表格样式--设置表格线样式" title="">                </div>                <div class="image-caption">表格样式--设置表格线样式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleTableSetAsDefault.png" alt="表格样式设置好后，同样需要点击：Set As Default，下次新建的 Model 才会应用该样式" title="">                </div>                <div class="image-caption">表格样式设置好后，同样需要点击：Set As Default，下次新建的 Model 才会应用该样式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleSetDefaultApplyToAll.png" alt="应用到所有" title="">                </div>                <div class="image-caption">应用到所有</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleView.png" alt="View 的样式，建议与 Table 的稍微不一样，以方便区分，不过，已经很少用 View 了" title="">                </div>                <div class="image-caption">View 的样式，建议与 Table 的稍微不一样，以方便区分，不过，已经很少用 View 了</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleSetDefault.png" alt="已有 Model 应用默认样式" title="">                </div>                <div class="image-caption">已有 Model 应用默认样式</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/PowerDesignerStyleSetDefaultPreview.png" alt="已有 Model 应用默认样式，点击 Default 之后的预览效果。然后点击 ok，应用到所有 symbols 即可。" title="">                </div>                <div class="image-caption">已有 Model 应用默认样式，点击 Default 之后的预览效果。然后点击 ok，应用到所有 symbols 即可。</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认样式是偏黄色的，屎黄屎黄的，有没有 ^o^~~&lt;br&gt;
    
    </summary>
    
      <category term="PowerDesigner" scheme="https://www.lovesofttech.com/categories/PowerDesigner/"/>
    
    
      <category term="PowerDesigner" scheme="https://www.lovesofttech.com/tags/PowerDesigner/"/>
    
  </entry>
  
  <entry>
    <title>日常经验--好记性不如烂文档</title>
    <link href="https://www.lovesofttech.com/general/experience/"/>
    <id>https://www.lovesofttech.com/general/experience/</id>
    <published>2019-05-30T16:00:00.000Z</published>
    <updated>2019-08-23T14:00:13.831Z</updated>
    
    <content type="html"><![CDATA[<p>记下来，方便遇到问题时快速查。</p><ul><li>可以节省以后自己查询的时间，也方便别人搜索。</li><li>如果不记，下次遇到问题还得再折腾一翻，不划算~~</li><li>利人利已~~</li></ul><a id="more"></a><h1 id="在机械硬盘上使用虚拟机和在固态硬盘上使用虚拟机的差别，有吗？大吗？真的吗？"><a href="#在机械硬盘上使用虚拟机和在固态硬盘上使用虚拟机的差别，有吗？大吗？真的吗？" class="headerlink" title="在机械硬盘上使用虚拟机和在固态硬盘上使用虚拟机的差别，有吗？大吗？真的吗？"></a>在机械硬盘上使用虚拟机和在固态硬盘上使用虚拟机的差别，有吗？大吗？真的吗？</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><ul><li>电脑上有两块硬盘。<ul><li>固态硬盘分了一个区：C，250 G，用于安装系统。</li><li>机械硬盘也只分了一个区：D，是一块比较老的机械硬盘，转速5400。</li></ul></li><li>虚拟机 win7 文件保存在 D 盘，启动时很慢，启动起来了，正常使用的过程中，电脑也变得比平时卡，电脑一直处在动不动就卡的状态，查看系统任务-&gt;系统性能，发现硬盘 D 的 IO 大多数时候接近或达到了100%。</li></ul><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>于是清理固态硬盘空间，将虚拟机文件移至固态硬盘，再启动，变得非常快了，那速度，杠杠的，而且使用过程中电脑也不卡了，固态硬盘也没有出现 IO 100%的情况。</p><p>我只想说，同样是硬盘，差距咋就这么大捏~~~</p><h1 id="不同网段间通信遇到的问题"><a href="#不同网段间通信遇到的问题" class="headerlink" title="不同网段间通信遇到的问题"></a>不同网段间通信遇到的问题</h1><p>本机网段是：192.168.1<br>需要访问的服务器网段是：192.168.33</p><p>一直可正常访问，有一次过了一个周末，周一上班时，不能访问了，ping 不通，但是上外网正常。</p><p>网管来看了之后，先是把静态 IP 换成动态 IP，获取到的 IP 地址依然在 192.168.1 网段，还是 ping 不通，于是检查机房的交换机，一切正常。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>最后，重启本机所在的路由器，正常了。</p><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>遇到类似的问题，包括：</p><ul><li>突然不能上外网。</li><li>某网站突然不能访问了。<ul><li>可能是线路的原因，工作中遇到过这种情况。客户散布在全国各地，偶尔有客户联系我们说访问不了网站了，我们自己测试又是正常的，也是通过重启路由器解决的，有时添加 dns:8.8.8.8 也能解决。<br>先让路由器“冷静”两分钟，一般都能解决。</li></ul></li></ul><h1 id="还原-SQL-Server-数据库"><a href="#还原-SQL-Server-数据库" class="headerlink" title="还原 SQL Server 数据库"></a>还原 SQL Server 数据库</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标题: Microsoft SQL Server Management Studio</span><br><span class="line">------------------------------</span><br><span class="line">还原 对于 服务器“192.168.1.8”失败。  (Microsoft.SqlServer.SmoExtended)</span><br><span class="line">有关帮助信息，请单击: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;ProdVer=10.50.1600.1+((KJ_RTM).100402-1539+)&amp;EvtSrc=Microsoft.SqlServer.Management.Smo.ExceptionTemplates.FailedOperationExceptionText&amp;EvtID=还原+Server&amp;LinkId=20476</span><br><span class="line">------------------------------</span><br><span class="line">其他信息:</span><br><span class="line">System.Data.SqlClient.SqlError: RESTORE 无法处理数据库 &apos;devDatabase&apos;，因为它正由此会话使用。建议在执行此操作时使用 master 数据库。 (Microsoft.SqlServer.Smo)</span><br><span class="line">有关帮助信息，请单击: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;ProdVer=10.50.1600.1+((KJ_RTM).100402-1539+)&amp;LinkId=20476</span><br></pre></td></tr></table></figure><p>设置登录用户的默认数据库为非 <code>devDatabase</code> 后，错误信息变为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标题: Microsoft SQL Server Management Studio</span><br><span class="line">------------------------------</span><br><span class="line">还原 对于 服务器“192.168.1.8”失败。  (Microsoft.SqlServer.SmoExtended)</span><br><span class="line">有关帮助信息，请单击: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;ProdVer=10.50.1600.1+((KJ_RTM).100402-1539+)&amp;EvtSrc=Microsoft.SqlServer.Management.Smo.ExceptionTemplates.FailedOperationExceptionText&amp;EvtID=还原+Server&amp;LinkId=20476</span><br><span class="line">------------------------------</span><br><span class="line">其他信息:</span><br><span class="line">System.Data.SqlClient.SqlError: 因为数据库正在使用，所以无法获得对数据库的独占访问权。 (Microsoft.SqlServer.Smo)</span><br><span class="line">有关帮助信息，请单击: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;ProdVer=10.50.1600.1+((KJ_RTM).100402-1539+)&amp;LinkId=20476</span><br></pre></td></tr></table></figure></p><h2 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h2><p>设置为单用户之后，还原成功。还原之后，又变成备份之前的多用户模式了。</p><p>设置方式：选中要还原的数据库–&gt;右键–&gt;属性–&gt;选项–&gt;状态–&gt;限制访问，该值从<code>MULTI_USER</code>修改为<code>SINGLE_USER</code>，此时该数据库就会显示为单用户模式。</p><p>还可以用 sql 脚本设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---设置数据库为单用户模式</span><br><span class="line">USE MASTER</span><br><span class="line">ALTER DATABASE devDatabase SET SINGLE_USER WITH ROLLBACK IMMEDIATE</span><br><span class="line"></span><br><span class="line">---设置数据库为多用户模式</span><br><span class="line">USE MASTER</span><br><span class="line">ALTER DATABASE devDatabase SET MULTI_USER WITH ROLLBACK IMMEDIATE</span><br></pre></td></tr></table></figure></p><p>设置为单用户模式的过程，我踩了一个大大的坑，因为我操作的是默认数据库，设置完成之后，再操作就会出错，不给机会恢复数据，重新登录时，会这样提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">标题: 连接到服务器</span><br><span class="line">------------------------------</span><br><span class="line">无法连接到 192.168.1.8。</span><br><span class="line">------------------------------</span><br><span class="line">其他信息:</span><br><span class="line">无法打开用户默认数据库。登录失败。</span><br><span class="line">用户 &apos;dbUser&apos; 登录失败。 (Microsoft SQL Server，错误: 4064)</span><br><span class="line">有关帮助信息，请单击: http://go.microsoft.com/fwlink?ProdName=Microsoft+SQL+Server&amp;EvtSrc=MSSQLServer&amp;EvtID=4064&amp;LinkId=20476</span><br></pre></td></tr></table></figure></p><p>遇到这种情况，换一个具备管理权限的用户登录，如果没有，远程到服务器或者直接使用服务器的键盘鼠标显示器，以 windows 身份认证登录 SQL Server Management Studio，将上面提示的用户 <code>dbUser</code> 的默认数据库设置为非 <code>devDatabase</code> 数据库，然后才可以远程登录并恢复数据库。</p><p>当然了，如果能直接操作服务器，怎么玩就看个人喜好了~~</p><p>如果以下几种情况你都满足，那就只有恭喜你了~~</p><ol><li>没有别的具备管理权限的用户登录权限。</li><li>不能远程到服务器。</li><li>不能直接操作服务器。</li><li>或者即使可以操作服务器，却不能有效登录 SQL Server。</li></ol><p>参考：<a href="https://blog.csdn.net/u011127019/article/details/54140595" target="_blank" rel="noopener">Sql server还原失败(数据库正在使用,无法获得对数据库的独占访问权)</a></p><h1 id="SQL-Server-Management-Studio-保存的-sql-脚本文件编码问题"><a href="#SQL-Server-Management-Studio-保存的-sql-脚本文件编码问题" class="headerlink" title="SQL Server Management Studio 保存的 sql 脚本文件编码问题"></a>SQL Server Management Studio 保存的 sql 脚本文件编码问题</h1><p>SQL Server Management Studio 保存的 sql 脚本文件，编码默认为 gbk2312，而我用的 IDEA 默认为 ugf-8，每次用 IDEA 打开这类脚本文件，会这样提示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/sqlServerManagementStudioFileEncode01.png" alt="idea 提示：以gbk编码方式打开或者设置项目默认编码为gbk" title="">                </div>                <div class="image-caption">idea 提示：以gbk编码方式打开或者设置项目默认编码为gbk</div>            </figure></p><p>中文全部显示为乱码。</p><blockquote><p>请忽略乱码部分。本人临时从一个05年的老项目查数据，表名和字段名竟然全是中文，第一次遇到，汗在不停的往下掉~~</p></blockquote><h2 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h2><p>文件由原来的默认 gbk2312 编码改为 utf-8。</p><p>在 SQL Server Management Studio 保存的时候，【保存】后面的下拉列表选【编码保存(V)…】，在【编码(E):】下拉列表选择 UTF-8 即可，如果已经是 gbk2312 了，按此方法另存，覆盖现有文件即可。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/sqlServerManagementStudioFileEncode02.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/sqlServerManagementStudioFileEncode03.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>我尝试过用 IDEA 直接以 utf8 的方式打开，然后从 SQL Server Management Studio 编辑器把文件内容 copy 过来，或者用 notepad++ 打开再 copy 过来，保存。然后，用 SQL Server Management Studio 编辑器打开，是乱码。</p><p>用 SQL Server Management Studio 【编码保存(V)…】为 utf-8 格式的文件，则可以兼顾 SQL Server Management Studio 和 IDEA。</p><h1 id="virtual-box-win7-虚拟机，方向键、home、delete、退格键不好使"><a href="#virtual-box-win7-虚拟机，方向键、home、delete、退格键不好使" class="headerlink" title="virtual box win7 虚拟机，方向键、home、delete、退格键不好使"></a>virtual box win7 虚拟机，方向键、home、delete、退格键不好使</h1><p>发生在切换输入法的时候，具体怎么触发的，没有深入研究。</p><p>发生之后，26个字母和数字等均可正常输入，就是方向键、home、delete、退格键不好使。</p><h2 id="解决-3"><a href="#解决-3" class="headerlink" title="解决"></a>解决</h2><p>第一次是重启虚拟机，后来尝试了各种按键组合，无意间发现，按一下窗口键就好了。</p><h1 id="VirtualBox-虚拟-win7-网卡提示：未识别的网络"><a href="#VirtualBox-虚拟-win7-网卡提示：未识别的网络" class="headerlink" title="VirtualBox 虚拟 win7 网卡提示：未识别的网络"></a>VirtualBox 虚拟 win7 网卡提示：未识别的网络</h1><h2 id="现象-2"><a href="#现象-2" class="headerlink" title="现象"></a>现象</h2><p>虚拟机设置成桥接模式，网卡选成与物理网卡一致，一直用得好好的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/general/virtualBoxNetworkConfig.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>提示不能用之前，把网线从路由器换到了同一个局域网的交换机上，于是出现：未识别的网络。</p><h2 id="解决-4"><a href="#解决-4" class="headerlink" title="解决"></a>解决</h2><p>最终是重启物理主机解决的。</p><h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>各种修改虚拟机网卡设置，禁用部分网卡，启用之前没用过的，修改物理主机的，与 VirtualBox 相关的网卡IP为与物理主机同一个网段的固定IP，重启虚拟机多次，问题依旧。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>使用 windows 如果遇到百思不得其解的奇葩问题，先重启一下电脑再说。这已经是第二次遇到这种情况了，即：通过常规思路不能解决，重启电脑立即解决。</p><h1 id="解决-mybatis-generator-使用新版-mysql-驱动-8-0-版本时会生成用户下多个库里的表的问题"><a href="#解决-mybatis-generator-使用新版-mysql-驱动-8-0-版本时会生成用户下多个库里的表的问题" class="headerlink" title="解决 mybatis generator 使用新版 mysql 驱动 8.0 版本时会生成用户下多个库里的表的问题"></a>解决 mybatis generator 使用新版 mysql 驱动 8.0 版本时会生成用户下多个库里的表的问题</h1><p>例如下面的错误信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 是因为在另外一个库里的同名表 sys_dept 没有 status 和 dept_id 这两个字段。</span><br><span class="line">Column status, specified for override in table sys_dept, does not exist in the table.</span><br><span class="line">Column dept_id, specified as an identity column in table sys_dept, does not exist in the table.</span><br><span class="line"># 是因为在另外一个库里的同名表 sys_menu 没有 menu_id 这个字段</span><br><span class="line">Column menu_id, specified as an identity column in table sys_menu, does not exist in the table.</span><br><span class="line"></span><br><span class="line"># 是因为有两个库存在表：sys_dept 和 sys_menu，所以在生成第二个库的同名表文件时，会提示:was overwritten</span><br><span class="line">Existing file ...\entity\SysDeptExample.java was overwritten</span><br><span class="line">Existing file ...\entity\SysDept.java was overwritten</span><br><span class="line">Existing file ...\mapper\original\SysDeptMapper.java was overwritten</span><br><span class="line">Existing file ...\entity\SysMenuExample.java was overwritten</span><br><span class="line">Existing file ...\entity\SysMenu.java was overwritten</span><br><span class="line">Existing file ...\mapper\original\SysMenuMapper.java was overwritten</span><br></pre></td></tr></table></figure></p><p>值得注意的是，如果表结构不一致，不一定会报错。只有当配置里的字段不一致时才会报错或警告，所以，一定要避免从多个库生成同名表的 mapper。</p><p>针对表的配置，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table tableName=&quot;sys_dept&quot; domainObjectName=&quot;SysDept&quot;&gt;&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot;/&gt;&lt;generatedKey identity=&quot;true&quot; type=&quot;post&quot; column=&quot;dept_id&quot; sqlStatement=&quot;Mysql&quot;/&gt;&lt;columnOverride column=&quot;status&quot; javaType=&quot;java.lang.Integer&quot; jdbcType=&quot;INTEGER&quot; /&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>有关 MyBatis 的使用，请参考：<a href="/mybatis/index">MyBatis，文章目录</a></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在生成器的配置文件里的数据库连接地址中添加下列参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nullCatalogMeansCurrent=true</span><br></pre></td></tr></table></figure></p><p>或者在连接属性里添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>完整配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;jdbcConnection driverClass=&quot;com.mysql.cj.jdbc.Driver&quot;</span><br><span class="line">connectionURL=&quot;jdbc:mysql://localhost:3306/security&quot;</span><br><span class="line">userId=&quot;root&quot;</span><br><span class="line">password=&quot;root&quot;&gt;</span><br><span class="line">&lt;!--MySQL 8.x 需要指定服务器的时区--&gt;</span><br><span class="line">&lt;property name=&quot;serverTimezone&quot; value=&quot;UTC&quot;/&gt;</span><br><span class="line">&lt;property name=&quot;nullCatalogMeansCurrent&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">&lt;/jdbcConnection&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记下来，方便遇到问题时快速查。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以节省以后自己查询的时间，也方便别人搜索。&lt;/li&gt;
&lt;li&gt;如果不记，下次遇到问题还得再折腾一翻，不划算~~&lt;/li&gt;
&lt;li&gt;利人利已~~&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="experience" scheme="https://www.lovesofttech.com/categories/experience/"/>
    
    
      <category term="experience" scheme="https://www.lovesofttech.com/tags/experience/"/>
    
  </entry>
  
  <entry>
    <title>redis 文章目录</title>
    <link href="https://www.lovesofttech.com/redis/index/"/>
    <id>https://www.lovesofttech.com/redis/index/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2019-06-12T14:36:36.868Z</updated>
    
    <content type="html"><![CDATA[<p>有关 redis 的使用经验。<br><a id="more"></a></p><ul><li><a href="/redis/general">redis5.0.5 在 CentOS7 上的安装和使用</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有关 redis 的使用经验。&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="https://www.lovesofttech.com/categories/redis/"/>
    
    
      <category term="redis" scheme="https://www.lovesofttech.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis5.0.5 在 CentOS7 上的安装和使用</title>
    <link href="https://www.lovesofttech.com/redis/general/"/>
    <id>https://www.lovesofttech.com/redis/general/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2019-06-21T23:52:41.221Z</updated>
    
    <content type="html"><![CDATA[<p>介绍安装以及简单的配置。<br><a id="more"></a></p><h1 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h1><p>下载安装，进官网：<a href="https://redis.io/" target="_blank" rel="noopener">https://redis.io/</a></p><p>建议将解压目录放到 /opt 下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line">[root@AndyCentOS7Basic ~]# tar xzf redis-5.0.5.tar.gz</span><br><span class="line">[root@AndyCentOS7Basic ~]# mv redis-5.0.5 /opt/</span><br></pre></td></tr></table></figure></p><p>参照官网，安装步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# cd /opt/redis-5.0.5/</span><br><span class="line">[root@AndyCentOS7Basic ~]# make</span><br></pre></td></tr></table></figure></p><h1 id="Redis-运行"><a href="#Redis-运行" class="headerlink" title="Redis 运行"></a>Redis 运行</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# /opt/redis-5.0.5/src/redis-server</span><br><span class="line">6105:C 30 May 2019 08:26:04.160 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">6105:C 30 May 2019 08:26:04.160 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6105, just started</span><br><span class="line">6105:C 30 May 2019 08:26:04.160 # Warning: no config file specified, using the default config. In order to specify a config file use /opt/redis-5.0.5/src/redis-server /path/to/redis.conf</span><br><span class="line">6105:M 30 May 2019 08:26:04.161 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &apos;&apos;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &apos;&apos;-._           Redis 5.0.5 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &apos;&apos;-._                                   </span><br><span class="line"> (    &apos;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&apos;` _.-&apos;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&apos;    |     PID: 6105</span><br><span class="line">  `-._    `-._  `-./  _.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&apos;    _.-&apos;_.-&apos;|                                  </span><br><span class="line"> |    `-._`-._        _.-&apos;_.-&apos;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&apos;_.-&apos;    _.-&apos;                                   </span><br><span class="line">      `-._    `-.__.-&apos;    _.-&apos;                                       </span><br><span class="line">          `-._        _.-&apos;                                           </span><br><span class="line">              `-.__.-&apos;                                               </span><br><span class="line"></span><br><span class="line">6105:M 30 May 2019 08:26:04.161 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">6105:M 30 May 2019 08:26:04.162 # Server initialized</span><br><span class="line">6105:M 30 May 2019 08:26:04.162 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &apos;vm.overcommit_memory = 1&apos; to /etc/sysctl.conf and then reboot or run the command &apos;sysctl vm.overcommit_memory=1&apos; for this to take effect.</span><br><span class="line">6105:M 30 May 2019 08:26:04.162 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &apos;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&apos; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.</span><br><span class="line">6105:M 30 May 2019 08:26:04.162 * Ready to accept connections</span><br></pre></td></tr></table></figure><p>以后台程序方式运行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# /opt/redis-5.0.5/src/redis-server &amp;</span><br></pre></td></tr></table></figure></p><h1 id="检查后台进程是否正在运行"><a href="#检查后台进程是否正在运行" class="headerlink" title="检查后台进程是否正在运行"></a>检查后台进程是否正在运行</h1><p>没有运行的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# ps -ef |grep redis</span><br><span class="line">root      1726  1707  0 09:01 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure></p><p>运行时执行同样命令的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# ps -ef |grep redis</span><br><span class="line">root      6105  1998  0 08:26 pts/2    00:00:00 /opt/redis-5.0.5/src/redis-server *:6379</span><br><span class="line">root      6127  6109  0 08:27 pts/3    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure></p><h1 id="检测6379端口是否在监听"><a href="#检测6379端口是否在监听" class="headerlink" title="检测6379端口是否在监听"></a>检测6379端口是否在监听</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# netstat -lntp | grep 6379</span><br><span class="line">tcp        0      0 0.0.0.0:6379            0.0.0.0:*               LISTEN      6130/redis-server * </span><br><span class="line">tcp6       0      0 :::6379                 :::*                    LISTEN      6130/redis-server *</span><br></pre></td></tr></table></figure><h1 id="退出redis服务器"><a href="#退出redis服务器" class="headerlink" title="退出redis服务器"></a>退出redis服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# /opt/redis-5.0.5/src/redis-cli shutdown</span><br><span class="line">6130:M 30 May 2019 09:14:18.481 # User requested shutdown...</span><br><span class="line">6130:M 30 May 2019 09:14:18.481 * Saving the final RDB snapshot before exiting.</span><br><span class="line">6130:M 30 May 2019 09:14:18.548 * DB saved on disk</span><br><span class="line">6130:M 30 May 2019 09:14:18.548 # Redis is now ready to exit, bye bye...</span><br><span class="line">[1]+  Done                    /opt/redis-5.0.5/src/redis-server</span><br></pre></td></tr></table></figure><p>因为Redis可以妥善处理SIGTERM信号，所以直接 <code>kill -9 PID</code> 也是可以的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# ps -ef |grep redis</span><br><span class="line">root      6199  1998  0 09:20 pts/2    00:00:00 /opt/redis-5.0.5/src/redis-server *:6379</span><br><span class="line">root      6205  1998  0 09:22 pts/2    00:00:00 grep --color=auto redis</span><br><span class="line">[root@AndyCentOS7Basic ~]# kill -9 6199</span><br><span class="line">[root@AndyCentOS7Basic ~]# ps -ef |grep redis</span><br><span class="line">root      6207  1998  0 09:22 pts/2    00:00:00 grep --color=auto redis</span><br><span class="line">[1]+  Killed                  /opt/redis-5.0.5/src/redis-server</span><br></pre></td></tr></table></figure></p><p>redis 设置密码登录后，要用 <code>redis-cli</code> 关闭 redis 服务器，需要 <code>redis-cli -a 密码 shutdown</code> </p><h1 id="修改配置项"><a href="#修改配置项" class="headerlink" title="修改配置项"></a>修改配置项</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/redis-5.0.5/redis.conf</span><br></pre></td></tr></table></figure><ol><li>设置访问需要密码：<code># requirepass foobared</code> 改为：<code>requirepass andyRedisPass</code>，其中 <code>andyRedisPass</code> 为密码，改为你自己的密码。</li><li><code>bind 127.0.0.1</code> 直接注释掉，改为：<code># bind 127.0.0.1</code></li><li>将 <code>daemonize no</code> 改为 <code>daemonize yes</code>，作用是默认启动时为后台启动。</li></ol><h2 id="protected-mode-属性"><a href="#protected-mode-属性" class="headerlink" title="protected-mode 属性"></a>protected-mode 属性</h2><p>redis3.2 版本后新增 <code>protected-mode</code> 配置，默认是 <code>protected-mode yes</code>，即开启。<br>设置外部网络连接 redis 服务时，与该配置相关，如下：</p><ol><li>关闭 protected-mode 模式，即改为：<code>protected-mode no</code>，此时外部网络可以直接访问（连接）。</li><li>开启 protected-mode 保护模式，需配置 bind ip 或者设置访问密码才能访问（连接）。</li></ol><h1 id="指定配置文件启动"><a href="#指定配置文件启动" class="headerlink" title="指定配置文件启动"></a>指定配置文件启动</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@AndyCentOS7Basic ~]# /opt/redis-5.0.5/src/redis-server /opt/redis-5.0.5/redis.conf &amp;</span><br><span class="line">[1] 6209</span><br><span class="line">[root@AndyCentOS7Basic ~]# 6209:C 30 May 2019 09:25:05.539 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">6209:C 30 May 2019 09:25:05.539 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=6209, just started</span><br><span class="line">6209:C 30 May 2019 09:25:05.539 # Configuration loaded</span><br><span class="line">[1]+  Done                    /opt/redis-5.0.5/src/redis-server /opt/redis-5.0.5/redis.conf</span><br><span class="line">[root@AndyCentOS7Basic ~]# ps -ef |grep redis</span><br><span class="line">root      6210     1  0 09:25 ?        00:00:00 /opt/redis-5.0.5/src/redis-server *:6379</span><br><span class="line">root      6215  1998  0 09:25 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure><h1 id="官网文档"><a href="#官网文档" class="headerlink" title="官网文档"></a>官网文档</h1><p><a href="https://redis.io/documentation" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>翻墙之后反面不能访问了~~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;介绍安装以及简单的配置。&lt;br&gt;
    
    </summary>
    
      <category term="redis" scheme="https://www.lovesofttech.com/categories/redis/"/>
    
    
      <category term="redis" scheme="https://www.lovesofttech.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>卸载 Office 2016 遇到的那些坑（完全干净的卸载 Office 2016）</title>
    <link href="https://www.lovesofttech.com/windows/winOffice2016Uninstall/"/>
    <id>https://www.lovesofttech.com/windows/winOffice2016Uninstall/</id>
    <published>2019-05-26T16:00:00.000Z</published>
    <updated>2019-09-16T13:56:06.276Z</updated>
    
    <content type="html"><![CDATA[<p>安装激活，请参考：<a href="/windows/winOffice2016Active">office 2016 系列： office(Word,Excel,PowerPoint)/visio/project 安装并激活</a><br><a id="more"></a></p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>参照上面链接（安装并激活）已经安装了 Office 2016，打开一个同事给的 ppt 时提示字体缺失并且部分内容显示不全。被告之是用 wps 编辑的，用 wps 可以正常打开和编辑，于是乎安装了 wps，然后：</p><ol><li>打开 Word 文档时，莫名其妙的提示有问题，每次打开都是这样，而且还不能保存文件，一保存就提示要另存为，但另存为也还是不行。</li><li><p>打开 Visio 则提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Visio</span><br><span class="line">---------------------------</span><br><span class="line">An unspecified error occurred.</span><br><span class="line">---------------------------</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li><li><p>Excel 的现象是，不能输入任何字符。</p></li></ol><ul><li>当然，不知道是不是因为安装了 wps 之后才这样的，因为平时也不怎么用 office 系列软件，是过了好长一段时间要用 Word/Visio/Excel 的时候才发现有问题的。</li><li>这里得说明一下，wps 是一款很棒的国产软件，在移动端有很好的表现，还能自动保存阅读过的文件（大小有限制）。</li><li>也许只是 wps 跟 Office 2016 这个版本有冲突吧。</li></ul><h1 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h1><p>于是开始了漫长的卸载和重装（踩坑） Office 2016 之旅。</p><ol><li>卸载 wps，很顺利。</li><li>在控制面板用自带的卸载程序，打开之后，一直停留在一共4步中的第一步。索性有一次下班时没关机专门运行卸载 Office 2016 的程序，但不幸的是，直到第二天上班，还停留在第一步。</li><li>用腾讯的软件管家卸载，转了几下圈儿之后，安静了，程序列表依然还有。</li><li>先不管了，又过了几天，再去控制面板操作，现象也是转几下圈儿就安静了，程序列表依然还是有。</li><li>好吧，那就不卸载了，重新安装。安装过程跟新安装一样，但是还是不能正常使用，问题依旧。</li><li>安装 64 位版本，提示已经安装了 32 位版本了。说明还是没有卸载干净。</li></ol><p>不知道跟使用破解版是否有关系。<br>后来百度，发现好多人都遇到过，卸载不干净，重新安装时会出错。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>参考官网：<a href="https://support.office.com/zh-cn/article/%E4%BB%8E-PC-%E5%8D%B8%E8%BD%BD-Office-9dd49b83-264a-477a-8fcc-2fdf5dbf61d8?ui=zh-CN&amp;rs=zh-CN&amp;ad=CN" target="_blank" rel="noopener">从 PC 卸载 Office</a></p><p>最终的解决办法是，使用微软官方提供的一个完全卸载 office 的 小工具，<strong>相当好使</strong>，用它卸载之后重启电脑，重新安装 64 位，熟悉的 Office 系列软件又能正常使用了，啦啦啦~~~，心情大好，赶紧记录下来，以防以后遇到同样的问题时手足无措，同时也希望能帮到大家。</p><p><a href="https://aka.ms/SaRA-officeUninstallFromPC" target="_blank" rel="noopener">微软官网，卸载工具下载链接</a></p><p>由于众所周知的网速问题，这里友情提供下载：</p><ul><li><a href="https://pan.baidu.com/s/1CCk3b-3P3jbcrOXr23FkcA" target="_blank" rel="noopener">百度网盘链接</a> </li><li>提取码: <code>87th</code></li></ul><p>有两个文件：</p><ul><li><code>SetupProd_OffScrub.exe</code>：从官方下载到的版本。</li><li><code>office2016-uninstall-assistant.diagcab</code>：是我从网友提供的网盘下载的版本，用于卸载 Office 2016 以及 Visio 2016 绝对没问题，杠杠的。没有验证其它版本的 Office 的卸载情况，从官网的介绍来看，应该通吃才对。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装激活，请参考：&lt;a href=&quot;/windows/winOffice2016Active&quot;&gt;office 2016 系列： office(Word,Excel,PowerPoint)/visio/project 安装并激活&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="office" scheme="https://www.lovesofttech.com/categories/office/"/>
    
    
      <category term="office" scheme="https://www.lovesofttech.com/tags/office/"/>
    
  </entry>
  
  <entry>
    <title>git 仓库从一个用户下迁移到另外一个用户下，包含提交历史</title>
    <link href="https://www.lovesofttech.com/git/repoChangeUser/"/>
    <id>https://www.lovesofttech.com/git/repoChangeUser/</id>
    <published>2019-05-04T16:00:00.000Z</published>
    <updated>2019-08-23T14:00:13.863Z</updated>
    
    <content type="html"><![CDATA[<ul><li>场景一，迁移仓库（含提交历史记录）</li><li>场景二，从旧库同步代码</li></ul><a id="more"></a><h1 id="场景一，迁移仓库（含提交历史记录）"><a href="#场景一，迁移仓库（含提交历史记录）" class="headerlink" title="场景一，迁移仓库（含提交历史记录）"></a>场景一，迁移仓库（含提交历史记录）</h1><ul><li>需要从第一个仓库 <code>repo-old</code> 转移到第二个仓库 <code>repo-current</code>，包括提交历史记录，同时两个仓库在不同的用户下面。</li><li><p>执行 <code>git remote add repo-current https://gitee.com/uncleAndyChen/repo-current.git</code>，添加第二个仓库为远端仓库，这时，<code>.git/config</code> 文件内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://gitee.com/elsafly/repo-old.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[remote &quot;repo-current&quot;]</span><br><span class="line">url = https://gitee.com/uncleAndyChen/repo-current.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/gitee/*</span><br></pre></td></tr></table></figure></li><li><p>执行 <code>git push repo-current</code> 之后，本地获取到的所有提交都会 push 到远端仓库 <code>repo-current</code>。</p></li><li><p>修改 git 配置 <code>.git/config</code> 为如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://gitee.com/uncleAndyChen/repo-current.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br></pre></td></tr></table></figure></li><li><p>配置修改完，需要在控制面板的 <code>Control Panel\User Accounts\Credential Manager -&gt; Windows Credentials</code> 下删除 gitee 的认证信息</p></li><li>再次执行 git 更新（pull 和 push）时会提示输入用户认证信息（登录）。</li><li>重新论证之后，就跟使用之前的仓库没什么区别了（提交历史都在）。现在，迁移仓库就算完成了。</li></ul><h1 id="场景二，从旧库同步代码"><a href="#场景二，从旧库同步代码" class="headerlink" title="场景二，从旧库同步代码"></a>场景二，从旧库同步代码</h1><p>在场景一的情况下，如果在操作 <code>git push repo-current</code> 时，还有一次或多次 commit 没有 pull，那么，接下来的操作，就是将这些 commit 同步到新的仓库。</p><ul><li><p>执行 <code>git remote add repo-old https://gitee.com/elsafly/repo-old.git</code>，把旧仓库加为远端仓库。这时，配置内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://gitee.com/uncleAndyChen/repo-current.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[remote &quot;repo-old&quot;]</span><br><span class="line">url = https://gitee.com/elsafly/repo-old.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/gitee/*</span><br></pre></td></tr></table></figure></li><li><p>pull 原来的仓库，会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull repo-old&quot;</span><br><span class="line">...</span><br><span class="line">You asked to pull from the remote &apos;elsafly&apos;, but did not specify a branch. </span><br><span class="line">Because this is not the default configured remote for your current branch, you must specify a branch on the command line.</span><br></pre></td></tr></table></figure></li><li><p>解决：将 <code>[branch &quot;master&quot;]</code> 节点的 <code>remote</code> 指向改为需要 pull 的远端仓库名，即改为 <code>repo-old</code>，修改之后，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = false</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">symlinks = false</span><br><span class="line">ignorecase = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">url = https://gitee.com/uncleAndyChen/repo-current.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = repo-old</span><br><span class="line">merge = refs/heads/master</span><br><span class="line">[remote &quot;repo-old&quot;]</span><br><span class="line">url = https://gitee.com/elsafly/repo-old.git</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/gitee/*</span><br></pre></td></tr></table></figure></li><li><p>然后执行 <code>git pull</code></p><ul><li>如果本地有修改，则会提示 merge，如果有冲突，还需要手动解决冲突。</li></ul></li><li>然后，恢复配置，继续用 origin 的远端仓库。将 <code>remote = repo-old</code> 改回 <code>remote = origin</code></li><li>执行 <code>git push</code>，达到同步目的。</li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>在都是 gitee 的情况下，要使用不同用户下的仓库，在切换仓库地址之后，需要在控制面板的 <code>Control Panel\User Accounts\Credential Manager -&gt; Windows Credentials</code> 下删除认证信息，然后再执行 git 更新（pull 和 push），执行更新时会提示输入用户认证信息（登录）。</li><li>否则会报错：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git pull repo-old</span><br><span class="line">remote: You do not have permission to pull from the repository via HTTPS</span><br><span class="line">fatal: Authentication failed for &apos;https://gitee.com/elsafly/repo-old.git/&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;场景一，迁移仓库（含提交历史记录）&lt;/li&gt;
&lt;li&gt;场景二，从旧库同步代码&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="git" scheme="https://www.lovesofttech.com/categories/git/"/>
    
      <category term="team" scheme="https://www.lovesofttech.com/categories/git/team/"/>
    
    
      <category term="git" scheme="https://www.lovesofttech.com/tags/git/"/>
    
      <category term="team" scheme="https://www.lovesofttech.com/tags/team/"/>
    
  </entry>
  
  <entry>
    <title>在 win10 下修改 hosts 文件</title>
    <link href="https://www.lovesofttech.com/windows/win10Hosts/"/>
    <id>https://www.lovesofttech.com/windows/win10Hosts/</id>
    <published>2019-04-27T16:00:00.000Z</published>
    <updated>2019-09-06T14:38:23.423Z</updated>
    
    <content type="html"><![CDATA[<p>由于 hosts 文件为系统文件，默认只读且不让修改，修改它需要技巧。<br><a id="more"></a></p><h1 id="解决hosts文件无法修改问题"><a href="#解决hosts文件无法修改问题" class="headerlink" title="解决hosts文件无法修改问题"></a>解决hosts文件无法修改问题</h1><h2 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h2><ul><li>进入 hosts 文件所在目录：<code>C:\Windows\System32\drivers\etc</code></li><li>点击 hosts 文件 -&gt; 右键 -&gt; 属性 -&gt; 安全 -&gt; 高级 -&gt; 更改权限 -&gt; 添加 -&gt; 选择主体 -&gt; 高级 -&gt; 立即查找 -&gt; 找到当前用户的账号 -&gt; 确定 -&gt; 确定 -&gt; 完全控制 -&gt; 确定</li></ul><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>将 hosts 文件复制到非系统目录，修改，然后复制到原目录，替换原来的文件即可。</p><h2 id="借助-notepad"><a href="#借助-notepad" class="headerlink" title="借助 notepad++"></a>借助 notepad++</h2><p>修改后保存的时候，提示需要重启，按照提示重启之后就可以随意修改了。</p><h1 id="修改之后，刷新DNS缓存"><a href="#修改之后，刷新DNS缓存" class="headerlink" title="修改之后，刷新DNS缓存"></a>修改之后，刷新DNS缓存</h1><p>进入cmd -&gt; 执行 <code>ipconfig /flushdns</code></p><blockquote><p>不过，一般重新打开浏览器即会生效。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于 hosts 文件为系统文件，默认只读且不让修改，修改它需要技巧。&lt;br&gt;
    
    </summary>
    
      <category term="windows" scheme="https://www.lovesofttech.com/categories/windows/"/>
    
      <category term="hosts" scheme="https://www.lovesofttech.com/categories/windows/hosts/"/>
    
    
      <category term="windows" scheme="https://www.lovesofttech.com/tags/windows/"/>
    
      <category term="hosts" scheme="https://www.lovesofttech.com/tags/hosts/"/>
    
  </entry>
  
</feed>
